<?xml version="1.0" encoding="UTF-8" standalone="no"?><navigation xmlns="nav"><package name="chav1961"><package name="purelib"><package name="basic"><class extends="java.lang.Object" kindof="CT_CLASS" modifiers="public" name="Utils" since="0.0.1 last update 0.0.3" type="chav1961.purelib.basic.Utils"><overview xmlns=""> This class contains implementation of the useful actions in the system

 
 
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.1 last update 0.0.3
</overview><field modifiers="public static final" name="CLASSTYPE_REFERENCE" since="@inherited" type="int"><overview xmlns=""> This class is a reference class


</overview></field><field modifiers="public static final" name="CLASSTYPE_BYTE" since="@inherited" type="int"><overview xmlns=""> This class is a primitive byte


</overview></field><field modifiers="public static final" name="CLASSTYPE_SHORT" since="@inherited" type="int"><overview xmlns=""> This class is a primitive short


</overview></field><field modifiers="public static final" name="CLASSTYPE_CHAR" since="@inherited" type="int"><overview xmlns=""> This class is a primitive char


</overview></field><field modifiers="public static final" name="CLASSTYPE_INT" since="@inherited" type="int"><overview xmlns=""> This class is a primitive int


</overview></field><field modifiers="public static final" name="CLASSTYPE_LONG" since="@inherited" type="int"><overview xmlns=""> This class is a primitive long


</overview></field><field modifiers="public static final" name="CLASSTYPE_FLOAT" since="@inherited" type="int"><overview xmlns=""> This class is a primitive float


</overview></field><field modifiers="public static final" name="CLASSTYPE_DOUBLE" since="@inherited" type="int"><overview xmlns=""> This class is a primitive double


</overview></field><field modifiers="public static final" name="CLASSTYPE_BOOLEAN" since="@inherited" type="int"><overview xmlns=""> This class is a primitive boolean


</overview></field><field modifiers="public static final" name="CLASSTYPE_VOID" since="@inherited" type="int"><overview xmlns=""> This class is a primitive void


</overview></field><method modifiers="public static" name="copyStream" since="@inherited" type="long"><overview xmlns=""> Copy one byte stream to another


 

* **is** input stream to copy from
 

* **os** output stream to copy to
 

//Returns://length transferred (in bytes)
 

* [[IOException|IOException]] :  if any I/O exception was thrown
 

* [[NullPointerException|NullPointerException]] :  when any problems with parameters
</overview><parameter name="is" type="java.io.InputStream"/><parameter name="os" type="java.io.OutputStream"/></method><method modifiers="public static" name="copyStream" since="0.0.3" type="long"><overview xmlns=""> Copy one byte stream to another with progress indicator


 

* **is** input stream to copy from
 

* **os** output stream to copy to
 

* **progress** progress indicator to use
 

//Returns://length transferred (in bytes). If copying was interrupted, returns negative value of partially transferred data
 

* [[IOException|IOException]] :  if any I/O exception was thrown
 

* [[NullPointerException|NullPointerException]] :  when any problems with parameters
 

//Since:// 0.0.3
</overview><parameter name="is" type="java.io.InputStream"/><parameter name="os" type="java.io.OutputStream"/><parameter name="progress" type="chav1961.purelib.basic.interfaces.ProgressIndicator"/></method><method modifiers="public static" name="copyStream" since="@inherited" type="int"><overview xmlns=""> Copy one character stream to another


 

* **is** input stream to copy from
 

* **os** output stream to copy to
 

//Returns://length transferred (in chars)
 

* [[IOException|IOException]] :  if any I/O exception was thrown
 

* [[NullPointerException|NullPointerException]] :  when any problems with parameters
</overview><parameter name="is" type="java.io.Reader"/><parameter name="os" type="java.io.Writer"/></method><method modifiers="public static" name="copyStream" since="0.0.3" type="int"><overview xmlns=""> Copy one character stream to another


 

* **is** input stream to copy from
 

* **os** output stream to copy to
 

//Returns://length transferred (in chars). If copying was interrupted, returns negative value of partially transferred data
 

* [[IOException|IOException]] :  if any I/O exception was thrown
 

* [[NullPointerException|NullPointerException]] :  when any problems with parameters
 

//Since:// 0.0.3
</overview><parameter name="is" type="java.io.Reader"/><parameter name="os" type="java.io.Writer"/><parameter name="progress" type="chav1961.purelib.basic.interfaces.ProgressIndicator"/></method><method modifiers="public static" name="copyStream" since="0.0.2" type="int"><overview xmlns=""> Copy one character source stream to another


 

* **is** input source stream to copy from
 

* **os** output target stream to copy to
 

//Returns://length transferred (in chars)
 

* [[ContentException|ContentException]] :  error reading source chars
 

* [[PrintingException|PrintingException]] :  error writing target chars 
 

* [[NullPointerException|NullPointerException]] :  when any problems with parameters
 

//Since:// 0.0.2
</overview><parameter name="is" type="chav1961.purelib.streams.interfaces.CharacterSource"/><parameter name="os" type="chav1961.purelib.streams.interfaces.CharacterTarget"/></method><method modifiers="public static" name="mkMap" since="@inherited" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"><overview xmlns=""> Build the Map&lt;String,Object&gt; map from the variable arguments list. Argument list need be a set of key/value pairs. Type of the 'key'
 parameter is always [[java|.lang.String String]], type of the 'value' parameter can be any (including null as value)


 

* **parameters** key/value pairs to parse.
 

//Returns://map built. Can be empty but not null. 
</overview><parameter name="parameters" type="java.lang.Object[]"/></method><method modifiers="public static" name="mkSet" since="@inherited" type="java.util.Set&lt;T&gt;"><overview xmlns=""> Build a set of the given type from the parameter's list


 

* &lt;T&gt; any class to make set instances from
 

* **content** class of the set content
 

* **parameters** parameters to add to set
 

//Returns://set created with the given parameters
</overview><parameter name="content" type="java.lang.Class&lt;T&gt;"/><parameter name="parameters" type="T[]"/></method><method modifiers="public static" name="mkProps" since="0.0.2" type="java.util.Properties"><overview xmlns=""> Build a Properties instance of the given type from the parameter's list


 

* **parameters** parameters to add to Properties
 

//Returns://Properties instance created with the given parameters
 

//Since:// 0.0.2
</overview><parameter name="parameters" type="java.lang.String[]"/></method><method modifiers="public static" name="fromResource" since="0.0.2" type="java.lang.String"><overview xmlns=""> Load reader content to string


 

* **reader** reader to load data from
 

//Returns://string loaded
 

* [[IOException|IOException]] :  any I/O exceptions 
 

* [[NullPointerException|NullPointerException]] :  if any parameters are null
 

//Since:// 0.0.2
</overview><parameter name="reader" type="java.io.Reader"/></method><method modifiers="public static" name="fromResource" since="@inherited" type="java.lang.String"><overview xmlns=""> Load resource content to string.


 

* **resourceURL** resource URL
 

//Returns://string loaded
 

* [[IOException|IOException]] :  any I/O exceptions 
 

* [[NullPointerException|NullPointerException]] :  if any parametetrs are null
</overview><parameter name="resourceURL" type="java.net.URL"/></method><method modifiers="public static" name="fromResource" since="@inherited" type="java.lang.String"><overview xmlns=""> Load resource content to string.


 

* **resourceURL** resource URL
 

* **encoding** resource content encoding
 

//Returns://string loaded
 

* [[IOException|IOException]] :  any I/O exceptions 
 

* [[NullPointerException|NullPointerException]] :  if any parametetrs are null
</overview><parameter name="resourceURL" type="java.net.URL"/><parameter name="encoding" type="java.lang.String"/></method><method modifiers="public static" name="defineClassType" since="@inherited" type="int"><overview xmlns=""> Classify the given class by it's primitive type


 

* **clazz** class to classify
 

//Returns://one of the CLASSTYPE_ZZZ constants (see description) 
</overview><parameter name="clazz" type="java.lang.Class&lt;?&gt;"/></method><method modifiers="public static" name="wrapArray" since="@inherited" type="java.lang.Byte[]"><overview xmlns=""> Create array with wrapped elements for the primitive values


 

* **content** primitive type array
 

//Returns://wrapped type array
</overview><parameter name="content" type="byte[]"/></method><method modifiers="public static" name="wrapArray" since="@inherited" type="java.lang.Short[]"><overview xmlns=""> Create array with wrapped elements for the primitive values


 

* **content** primitive type array
 

//Returns://wrapped type array
</overview><parameter name="content" type="short[]"/></method><method modifiers="public static" name="wrapArray" since="@inherited" type="java.lang.Integer[]"><overview xmlns=""> Create array with wrapped elements for the primitive values


 

* **content** primitive type array
 

//Returns://wrapped type array
</overview><parameter name="content" type="int[]"/></method><method modifiers="public static" name="wrapArray" since="@inherited" type="java.lang.Long[]"><overview xmlns=""> Create array with wrapped elements for the primitive values


 

* **content** primitive type array
 

//Returns://wrapped type array
</overview><parameter name="content" type="long[]"/></method><method modifiers="public static" name="wrapArray" since="@inherited" type="java.lang.Float[]"><overview xmlns=""> Create array with wrapped elements for the primitive values


 

* **content** primitive type array
 

//Returns://wrapped type array
</overview><parameter name="content" type="float[]"/></method><method modifiers="public static" name="wrapArray" since="@inherited" type="java.lang.Double[]"><overview xmlns=""> Create array with wrapped elements for the primitive values


 

* **content** primitive type array
 

//Returns://wrapped type array
</overview><parameter name="content" type="double[]"/></method><method modifiers="public static" name="wrapArray" since="@inherited" type="java.lang.Character[]"><overview xmlns=""> Create array with wrapped elements for the primitive values


 

* **content** primitive type array
 

//Returns://wrapped type array
</overview><parameter name="content" type="char[]"/></method><method modifiers="public static" name="wrapArray" since="@inherited" type="java.lang.Boolean[]"><overview xmlns=""> Create array with wrapped elements for the primitive values


 

* **content** primitive type array
 

//Returns://wrapped type array
</overview><parameter name="content" type="boolean[]"/></method><method modifiers="public static" name="unwrapArray" since="@inherited" type="byte[]"><overview xmlns=""> Create array with primitive elements from wrapped values


 

* **content** wrapped type array
 

//Returns://primitive type array
</overview><parameter name="content" type="java.lang.Byte[]"/></method><method modifiers="public static" name="unwrapArray" since="@inherited" type="short[]"><overview xmlns=""> Create array with primitive elements from wrapped values


 

* **content** wrapped type array
 

//Returns://primitive type array
</overview><parameter name="content" type="java.lang.Short[]"/></method><method modifiers="public static" name="unwrapArray" since="@inherited" type="int[]"><overview xmlns=""> Create array with primitive elements from wrapped values


 

* **content** wrapped type array
 

//Returns://primitive type array
</overview><parameter name="content" type="java.lang.Integer[]"/></method><method modifiers="public static" name="unwrapArray" since="@inherited" type="long[]"><overview xmlns=""> Create array with primitive elements from wrapped values


 

* **content** wrapped type array
 

//Returns://primitive type array
</overview><parameter name="content" type="java.lang.Long[]"/></method><method modifiers="public static" name="unwrapArray" since="@inherited" type="float[]"><overview xmlns=""> Create array with primitive elements from wrapped values


 

* **content** wrapped type array
 

//Returns://primitive type array
</overview><parameter name="content" type="java.lang.Float[]"/></method><method modifiers="public static" name="unwrapArray" since="@inherited" type="double[]"><overview xmlns=""> Create array with primitive elements from wrapped values


 

* **content** wrapped type array
 

//Returns://primitive type array
</overview><parameter name="content" type="java.lang.Double[]"/></method><method modifiers="public static" name="unwrapArray" since="@inherited" type="char[]"><overview xmlns=""> Create array with primitive elements from wrapped values


 

* **content** wrapped type array
 

//Returns://primitive type array
</overview><parameter name="content" type="java.lang.Character[]"/></method><method modifiers="public static" name="unwrapArray" since="@inherited" type="boolean[]"><overview xmlns=""> Create array with primitive elements from wrapped values


 

* **content** wrapped type array
 

//Returns://primitive type array
</overview><parameter name="content" type="java.lang.Boolean[]"/></method><method modifiers="public static" name="primitive2Wrapper" since="0.0.2" type="java.lang.Class&lt;?&gt;"><overview xmlns=""> Define wrapper class for the primitive type


 

* **clazz** class to define wrapper for
 

//Returns://wrapper for the primitive type
 

* [[NullPointerException|NullPointerException]] :  when class is null
 

* [[IllegalArgumentException|IllegalArgumentException]] :  when class is not a primitive class
 

//Since:// 0.0.2
</overview><parameter name="clazz" type="java.lang.Class&lt;?&gt;"/></method><method modifiers="public static" name="wrapper2Primitive" since="0.0.2" type="java.lang.Class&lt;?&gt;"><overview xmlns=""> Define primitive class for primitive wrapper class


 

* **clazz** class to define wrapper for
 

//Returns://primitive class for wrapper
 

* [[NullPointerException|NullPointerException]] :  when class is null
 

* [[IllegalArgumentException|IllegalArgumentException]] :  when class is not a wrapper to the primitive class
 

//Since:// 0.0.2
</overview><parameter name="clazz" type="java.lang.Class&lt;?&gt;"/></method><method modifiers="public static" name="extractLongValue" since="@inherited" type="long"><overview xmlns=""/><parameter name="obj" type="java.lang.Object"/></method><method modifiers="public static" name="extractDoubleValue" since="@inherited" type="double"><overview xmlns=""/><parameter name="obj" type="java.lang.Object"/></method><method modifiers="public static" name="canServeURI" since="@inherited" type="boolean"><overview xmlns=""> Does the resource URI can be served by the given URI resource template

 
 

* **uri** uri to check
 

* **template** resource template to compare with. Template must be absolute and contains valid scheme and subScheme
 

//Returns://true if can
 

* [[NullPointerException|NullPointerException]] :  if any argument ia null
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if template doesn't appropriates with the template constraints
</overview><parameter name="uri" type="java.net.URI"/><parameter name="template" type="java.net.URI"/></method><method modifiers="public static" name="validateXMLByXSD" since="@inherited" type="boolean"><overview xmlns=""> Validate XML content by it's XSD


 

* **xml** XML content to validate
 

* **xsd** XSD to check validation
 

//Returns://true is the XML content is valid
 

* [[NullPointerException|NullPointerException]] :  if any parameters are null
</overview><parameter name="xml" type="java.io.InputStream"/><parameter name="xsd" type="java.io.InputStream"/></method><method modifiers="public static" name="validateXMLByXSD" since="@inherited" type="boolean"><overview xmlns=""> Validate XML content by it's XSD


 

* **xml** XML content to validate
 

* **xsd** XSD to check validation
 

* **logger** logger facade to print error messages
 

//Returns://true is the XML content is valid
 

* [[NullPointerException|NullPointerException]] :  if any parameters are null
</overview><parameter name="xml" type="java.io.InputStream"/><parameter name="xsd" type="java.io.InputStream"/><parameter name="logger" type="chav1961.purelib.basic.interfaces.LoggerFacade"/></method><method modifiers="public static" name="getPurelibXSD" since="@inherited" type="java.io.InputStream"><overview xmlns=""> Get XSD from purelib XSD collection.

 
 

* **item** xsd type to get
 

//Returns://content of the XSD
 

* [[NullPointerException|NullPointerException]] :  if item is null
</overview><parameter name="item" type="chav1961.purelib.enumerations.XSDCollection"/></method><method modifiers="public static" name="loadBytesFromURI" since="@inherited" type="byte[]"><overview xmlns=""> Load bytes from the given URI.


 

* **uri** uri to load bytes from
 

//Returns://bytes loaded
 

* [[NullPointerException|NullPointerException]] :  when uri is null
 

* [[IOException|IOException]] :  on any I/O errors
</overview><parameter name="uri" type="java.net.URI"/></method><method modifiers="public static" name="loadCharsFromURI" since="@inherited" type="char[]"><overview xmlns=""> Load chars from the given URI.


 

* **uri** uri to load bytes from
 

//Returns://chars loaded
 

* [[NullPointerException|NullPointerException]] :  when uri is null
 

* [[IOException|IOException]] :  on any I/O errors
</overview><parameter name="uri" type="java.net.URI"/></method><method modifiers="public static" name="loadCharsFromURI" since="@inherited" type="char[]"><overview xmlns=""> Load chars from the given URI.


 

* **uri** uri to load bytes from
 

* **encoding** content encoding
 

//Returns://chars loaded
 

* [[NullPointerException|NullPointerException]] :  when uri is null
 

* [[IOException|IOException]] :  on any I/O errors
</overview><parameter name="uri" type="java.net.URI"/><parameter name="encoding" type="java.lang.String"/></method><method modifiers="public static" name="containsNestedURI" since="0.0.2" type="boolean"><overview xmlns=""> Test that given URI contains nested URI. NEsted URI is any URI in the scheme-specific part, terminated with exclamation mark (!)


 

* **uri** uri to test
 

//Returns://true if the given uri contains nested URI
 

* [[NullPointerException|NullPointerException]] :  if uri is null
 

//Since:// 0.0.2
</overview><parameter name="uri" type="java.net.URI"/></method><method modifiers="public static" name="extractNestedURI" since="0.0.2" type="java.net.URI"><overview xmlns=""> Extract nested URI from the given URI


 

* **uri** uri to extract nested URI from
 

//Returns://URI extracted or null if no nested URI inside the given uri instance
 

* [[NullPointerException|NullPointerException]] :  if uri is null
 

//See also://  [[##containsNestedURI(URI)|#containsNestedURI(URI)]]
 

//Since:// 0.0.2
</overview><parameter name="uri" type="java.net.URI"/></method><method modifiers="public static" name="extractPathInNestedURI" since="0.0.2" type="java.net.URI"><overview xmlns=""> Extract path in the nested uri. Path in the nested URI is all path content after last exclamation mark (!)


 

* **uri** uri to extract path from
 

//Returns://path extracted or null if no nested URI inside the given uri instance
 

* [[NullPointerException|NullPointerException]] :  if uri is null
 

//See also://  [[##containsNestedURI(URI)|#containsNestedURI(URI)]]
 

//Since:// 0.0.2
</overview><parameter name="uri" type="java.net.URI"/></method><method modifiers="public static" name="appendRelativePath2URI" since="0.0.3" type="java.net.URI"><overview xmlns=""> Append relative path to path inside URI.


 

* **uri** uri to append relative path to
 

* **relativePath** path to append
 

//Returns://new resolved uri
 

* [[NullPointerException|NullPointerException]] :  if uri is null
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if relative path is null or empty
 

//See also://  [[https://tools.ietf.org/html/rfc3986|https://tools.ietf.org/html/rfc3986]]
 

//Since:// 0.0.3
</overview><parameter name="uri" type="java.net.URI"/><parameter name="relativePath" type="java.lang.String"/></method><method modifiers="public static" name="removeQueryFromURI" since="0.0.3" type="java.net.URI"><overview xmlns=""> Remove query string from URI


 

* **uri** uri to remove query from
 

//Returns://uri with query removed. If query is missing, returns source uri
 

* [[NullPointerException|NullPointerException]] :  if uri is null
 

//See also://  [[https://tools.ietf.org/html/rfc3986|https://tools.ietf.org/html/rfc3986]]
 

//Since:// 0.0.3
</overview><parameter name="uri" type="java.net.URI"/></method><method modifiers="public static" name="deleteDir" since="0.0.2" type="boolean"><overview xmlns=""> Delete directory content and directory self.


 

* **dir** directory to delete
 

//Returns://true if deletion is successful
 

//Since:// 0.0.2
</overview><parameter name="dir" type="java.io.File"/></method><method modifiers="public static" name="fileMask2Regex" since="0.0.3" type="java.lang.String"><overview xmlns=""> Convert file mask to appropriative regular expression

 
 

* **fileMask** file mask to convert (for example *.txt)
 

//Returns://appropriative regular expression. Can't be null or empty
 

* [[IllegalArgumentException|IllegalArgumentException]] :  when file mask to convert is null or empty
 

//Since:// 0.0.3
</overview><parameter name="fileMask" type="java.lang.String"/></method></class><class extends="java.lang.Object" implements="[java.io.Closeable]" kindof="CT_CLASS" modifiers="public" name="TemporaryStore" since="0.0.2" type="chav1961.purelib.basic.TemporaryStore"><overview xmlns=""> This class is a store manager for temporary files. It designs to use in the predefined scenario for temporary file :


 
 
* get [[//TemporaryStore/InputOutputPair|InputOutputPair]] class instance

 
* get [[OutputStream|OutputStream]] from the instance and fill output content to temporary file

 
* get [[InputStream|InputStream]] from the instance and load input content from temporary file

 
* close instance

 
 This class is maximized to speed on little files (keeps content in RAM) and maximized memory on large files (uses ZLib compression).
 Switching from RAM usage and file system usage makes automatically during filling process. To prevent uncontrolled expansion of the RAM
 used, a maximal limit of the RAM buffer is used.


 This class implements [[Closeable|Closeable]] interface and can be user in the **try-with-resource** statements.

 
 This class can be used in the multi-threaded environment.


 
 

//See also://  [[LoggerFacade|LoggerFacade]]
 

//See also://  [[FileSystemInterface|FileSystemInterface]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><field modifiers="public static final" name="DEFAULT_BUFFER_SIZE" since="@inherited" type="int"><overview xmlns=""> Default RAM buffer size to use


</overview></field><method modifiers="public" name="close" since="@inherited" type="void"><overview xmlns=""/></method><method modifiers="public" name="allocate" since="@inherited" type="chav1961.purelib.basic.TemporaryStore.InputOutputPair"><overview xmlns=""> Allocate [[//TemporaryStore/InputOutputPair|InputOutputPair]] class to support predefined scenario. Allocated instance must be used in the **try-with-resource** statement
 or must be explicitly closed by call [[//TemporaryStore/InputOutputPair|#close()]] method. This call frees instance and return it to the instance's pool


 [[//TemporaryStore/InputOutputPair|InputOutputPair]] instance is not reusable. To create another temporary file you need to call 

* #allocate() again.


 

//Returns://{@linkplain InputOutputPair} instance to use
 

* [[IOException|IOException]] :  on any I/O errors
</overview></method></class><class extends="java.lang.Object" implements="[java.io.Closeable]" inside="TemporaryStore" kindof="CT_CLASS" modifiers="public" name="TemporaryStore.InputOutputPair" since="0.0.2" type="chav1961.purelib.basic.TemporaryStore.InputOutputPair"><overview xmlns=""> This class is used to support predefined scenario for temporary file usage


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public" name="getInputStream" since="@inherited" type="java.io.InputStream"><overview xmlns=""> Get input stream to read data from filled temporary file. Must be call after 

* #getOutputStream() only
 

//Returns://input stream to read data from 
 

* [[IOException|IOException]] :  on any I/O errors
</overview></method><method modifiers="public" name="getOutputStream" since="@inherited" type="java.io.OutputStream"><overview xmlns=""> Get output stream to fill temporary file. Must be call before 

* #getInputStream() only
 

//Returns://stream to fill data to
 

* [[IOException|IOException]] :  on any I/O errors
</overview></method><method modifiers="public" name="getSizeUsed" since="@inherited" type="long"><overview xmlns=""> Get current size of the data filled. Can be used and will be valid at any time


 

//Returns://current size of the data filled
 

* [[IOException|IOException]] :  on any I/O errors
</overview></method><method modifiers="public" name="close" since="@inherited" type="void"><overview xmlns=""/></method></class><class extends="chav1961.purelib.basic.AbstractLoggerFacade" kindof="CT_CLASS" modifiers="public" name="SystemErrLoggerFacade" since="0.0.1" type="chav1961.purelib.basic.SystemErrLoggerFacade"><overview xmlns=""> This class is an implementation of [[LoggerFacade|LoggerFacade]] interface for the System.err target log file.


 This class is not thread-safe.


 
 

//See also://  [[LoggerFacade|LoggerFacade]]
 

//See also://  [[//AbstractLoggerFacade|AbstractLoggerFacade]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.1
</overview><method modifiers="protected" name="getAbstractLoggerFacade" since="@inherited" type="chav1961.purelib.basic.AbstractLoggerFacade"><overview xmlns=""/><parameter name="mark" type="java.lang.String"/><parameter name="root" type="java.lang.Class&lt;?&gt;"/></method><method modifiers="protected" name="toLogger" since="@inherited" type="void"><overview xmlns=""/><parameter name="level" type="chav1961.purelib.basic.interfaces.LoggerFacade.Severity"/><parameter name="text" type="java.lang.String"/><parameter name="throwable" type="java.lang.Throwable"/></method></class><class extends="java.util.Properties" kindof="CT_CLASS" modifiers="public" name="SubstitutableProperties" since="0.0.1" type="chav1961.purelib.basic.SubstitutableProperties"><overview xmlns=""> This class is an extension of the standard [[Properties|Properties]] class to support automatic substitutions and data type conversions 
 when getting properties. Substitution as any template **${name}** inside any property value. It substitutes with the value of other
 property, whose key is 'name'. You can also used one-level depth template **${${nameLocation}}** whose 'nameLocation' means 'get 
 key name to substitute from the nameLocation key'. All substitutions are recursive. A source of properties to substitute are own 
 properties, but one-level depth template can be referenced to [[System|#getProperties()]] key set. Maximum substitution depth level
 is restricted by 16


 You can get property content not only as string, but a lot of other classes:


 
 
* any appropriative [[Enum|Enum]] class constant

 
* a subset of primitive type value (int, long, float, double, boolean)

 
* a subset of wrappers to primitive type value ([[Integer|Integer]], [[Long|Long]], [[Float|Float]], [[Double|Double]], [[Boolean|Boolean]])

 
* a [[File|File]] or [[InputStream|InputStream]] instance, if the property value contains valid file name

 
* a [[URL|URL]] or [[URI|URI]] instance, if the property value contains valid URL or URI

 
 To use it, simply type:


 {{{code}}}
 if (subst.getProperty("canUseSomething",boolean.class)) {&lt;br&gt;
 		int amount = subst.getProperty("amountOfSomething",int.class);
 }
 
 
 This class is thread-safe.



 

//See also://  [[Properties|Properties]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.1
</overview><method modifiers="public" name="getProperty" since="@inherited" type="java.lang.String"><overview xmlns=""/><parameter name="key" type="java.lang.String"/></method><method modifiers="public" name="getProperty" since="@inherited" type="java.lang.String"><overview xmlns=""/><parameter name="key" type="java.lang.String"/><parameter name="defaultValue" type="java.lang.String"/></method><method modifiers="public" name="getProperty" since="@inherited" type="T"><overview xmlns=""> Get property and convert it to requested class


 

* &lt;T&gt; class returned
 

* **key** key to get property value for
 

* **awaited** awaited class to convert value to
 

//Returns://value converted
</overview><parameter name="key" type="java.lang.String"/><parameter name="awaited" type="java.lang.Class&lt;T&gt;"/></method><method modifiers="public" name="getProperty" since="@inherited" type="T"><overview xmlns=""> Get property and convert it to requested class


 

* &lt;T&gt; class returned
 

* **key** key to get property value for
 

* **awaited** awaited class to convert value to
 

* **defaultValue** defaultValue to convert when property is missing
 

//Returns://value converted
</overview><parameter name="key" type="java.lang.String"/><parameter name="awaited" type="java.lang.Class&lt;T&gt;"/><parameter name="defaultValue" type="java.lang.String"/></method><method modifiers="protected" name="extendedGetProperty" since="@inherited" type="java.lang.String"><overview xmlns=""/><parameter name="key" type="java.lang.String"/></method><method modifiers="protected" name="convert" since="@inherited" type="T"><overview xmlns=""/><parameter name="key" type="java.lang.String"/><parameter name="value" type="java.lang.String"/><parameter name="awaited" type="java.lang.Class&lt;T&gt;"/></method></class><class extends="chav1961.purelib.basic.AbstractLoggerFacade" kindof="CT_CLASS" modifiers="public" name="StandardJRELoggerFacade" since="0.0.1" type="chav1961.purelib.basic.StandardJRELoggerFacade"><overview xmlns=""> This class is an implementation of [[LoggerFacade|LoggerFacade]] interface for the java.util.logging target log file.


 This class is not thread-safe.


 
 

//See also://  [[LoggerFacade|LoggerFacade]]
 

//See also://  [[//AbstractLoggerFacade|AbstractLoggerFacade]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.1
</overview><method modifiers="protected" name="getAbstractLoggerFacade" since="@inherited" type="chav1961.purelib.basic.AbstractLoggerFacade"><overview xmlns=""/><parameter name="mark" type="java.lang.String"/><parameter name="root" type="java.lang.Class&lt;?&gt;"/></method><method modifiers="protected" name="toLogger" since="@inherited" type="void"><overview xmlns=""/><parameter name="level" type="chav1961.purelib.basic.interfaces.LoggerFacade.Severity"/><parameter name="text" type="java.lang.String"/><parameter name="throwable" type="java.lang.Throwable"/></method></class><class extends="java.lang.Object" implements="[chav1961.purelib.basic.interfaces.FSMProcessor&lt;Terminal, Parameter&gt;]" kindof="CT_CLASS" modifiers="public" name="StackedFSM" since="0.0.2" type="chav1961.purelib.basic.StackedFSM"><overview xmlns=""> 
 This class is an implementation of the Stacked Finite State Machine (FSM). It describes the Mile FSM. Every FSM has a FSM jump table, current state and callback associated. The main 
 method to use for FSM is 

* #processTerminal(Enum, Object) method. It scans FSM jump table, finds the current state/terminal/stack combination, and changed current FSM state on success.
 It also calls the callback [[//StackedFSM/StackedFSMCallback|#process(StackedFSM, Enum, Enum, Object, Enum, StackAction, Enum[], Object)]] method to process associated actions for the given FSM state
 change.


  
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2

 

* &lt;Terminal&gt; terminal (in the terms of FSM)
 

* &lt;NonTerminal&gt; non-terminal (in the terms of FSM)
 

* &lt;Stack&gt; stack top content (in the terms of FSM)
 

* &lt;Exit&gt; exit symbol (in the terms of FSM)
 

* &lt;Parameter&gt; any cargo to pass thru the FSM to FSM callback
</overview><method modifiers="public final" name="processTerminal" since="@inherited" type="void"><overview xmlns=""/><parameter name="terminal" type="Terminal extends java.lang.Enum&lt;?&gt;"/><parameter name="parameter" type="Parameter"/></method><method modifiers="public" name="debugEnable" since="@inherited" type="void"><overview xmlns=""/><parameter name="logger" type="chav1961.purelib.basic.interfaces.LoggerFacade"/><parameter name="logFailures" type="boolean"/></method><method modifiers="public" name="debugDisable" since="@inherited" type="void"><overview xmlns=""/></method><method modifiers="public" name="isDebugEnable" since="@inherited" type="boolean"><overview xmlns=""/></method></class><class extends="java.lang.Enum&lt;E extends java.lang.Enum&lt;E&gt;&gt;" inside="StackedFSM" kindof="CT_CLASS" modifiers="public static final" name="StackedFSM.StackAction" since="0.0.2" type="chav1961.purelib.basic.StackedFSM.StackAction"><overview xmlns=""> Stack action for the FSM jumps


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2

</overview><method modifiers="public static" name="values" since="@inherited" type="chav1961.purelib.basic.StackedFSM.StackAction[]"><overview xmlns=""/></method><method modifiers="public static" name="valueOf" since="@inherited" type="chav1961.purelib.basic.StackedFSM.StackAction"><overview xmlns=""/><parameter name="name" type="java.lang.String"/></method></class><class inside="StackedFSM" kindof="CT_INTERFACE" modifiers="public static interface" name="StackedFSM.StackedFSMCallback" since="0.0.2" type="chav1961.purelib.basic.StackedFSM.StackedFSMCallback"><overview xmlns=""> This interface describes a callback to process successful stacked FSM state changes.

   
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
 

* &lt;Terminal&gt; terminal (in the terms of FSM)
 

* &lt;NonTerminal&gt; non-terminal (in the terms of FSM)
 

* &lt;Exit&gt; exit symbol (in the terms of FSM)
 

* &lt;Stack&gt; stack content type (in the terms of FSM)
 

* &lt;Parameter&gt; any cargo to pass thru the FSM to FSM callback
</overview><method modifiers="public" name="process" since="@inherited" type="Stack"><overview xmlns=""> Process callback of the FSM


 

* **fsm** fsm instance that calls this method
 

* **terminal** terminal from the {@linkplain FSM#processTerminal(Enum, Object)} method
 

* **fromState** current state of the FSM
 

* **top** top of the stack
 

* **toState** new state of the FSM
 

* **stack** action to make with the stack
 

* **action** action list for the given state jump
 

* **parameter** parameter from the {@linkplain FSM#processTerminal(Enum, Object)} method
 

//Returns://stack value to push into stack if the stack action is {@linkplain StackedFSM.StackAction#PUSH} 
 

* [[FlowException|FlowException]] :  indicate any processing errors
</overview><parameter name="fsm" type="chav1961.purelib.basic.StackedFSM&lt;Terminal, NonTerminal, Stack, Exit, Parameter&gt;"/><parameter name="terminal" type="Terminal extends java.lang.Enum&lt;?&gt;"/><parameter name="fromState" type="NonTerminal extends java.lang.Enum&lt;?&gt;"/><parameter name="top" type="Stack"/><parameter name="toState" type="NonTerminal extends java.lang.Enum&lt;?&gt;"/><parameter name="stack" type="chav1961.purelib.basic.StackedFSM.StackAction"/><parameter name="action" type="Exit[]"/><parameter name="parameter" type="Parameter"/></method></class><class extends="java.lang.Object" inside="StackedFSM" kindof="CT_CLASS" modifiers="public static" name="StackedFSM.FSMLine" since="0.0.2" type="chav1961.purelib.basic.StackedFSM.FSMLine"><overview xmlns=""> This class describes one line of the stacked FSM jump table.


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
 

* &lt;Terminal&gt; terminal (in the terms of FSM)
 

* &lt;NonTerminal&gt; non-terminal (in the terms of FSM)
 

* &lt;Stack&gt; top stack symbol (in the terms of FSM)
 

* &lt;Exit&gt; exit symbol (in the terms of FSM)
</overview><field modifiers="public final" name="state" since="@inherited" type="NonTerminal"><overview xmlns=""/></field><field modifiers="public final" name="terminal" since="@inherited" type="Terminal"><overview xmlns=""/></field><field modifiers="public final" name="stack" since="@inherited" type="Stack"><overview xmlns=""/></field><field modifiers="public final" name="newState" since="@inherited" type="NonTerminal"><overview xmlns=""/></field><field modifiers="public final" name="stackAction" since="@inherited" type="chav1961.purelib.basic.StackedFSM.StackAction"><overview xmlns=""/></field><field modifiers="public final" name="actions" since="@inherited" type="Exit[]"><overview xmlns=""/></field><method modifiers="public" name="toString" since="@inherited" type="java.lang.String"><overview xmlns=""/></method></class><class extends="java.lang.Object" implements="[java.util.Iterator&lt;T&gt;]" kindof="CT_CLASS" modifiers="public" name="SequenceIterator" since="0.0.2" type="chav1961.purelib.basic.SequenceIterator"><overview xmlns=""> This class implements iterator functionality based on a list of nested iterators. When the first iterator in the list is exhausted, this class
 automatically switches to the second iterator in the list and so on. Exhausting of the last iterator in the list stops iteration process


 This class is not thread-safe.


 
 

* &lt;T&gt; any referenced type
 

//See also://  [[Iterator|Iterator]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public static" name="iterable" since="@inherited" type="java.lang.Iterable&lt;T&gt;"><overview xmlns=""> Build iterator instance 


 

* &lt;T&gt; any referenced type
 

* **list** iterator list to iterate on it's content
 

//Returns://iterable instance. Can be empty, but no null
</overview><parameter name="list" type="java.util.Iterator[]"/></method><method modifiers="public" name="hasNext" since="@inherited" type="boolean"><overview xmlns=""/></method><method modifiers="public" name="next" since="@inherited" type="T"><overview xmlns=""/></method></class><class extends="java.lang.Object" implements="[java.lang.AutoCloseable]" kindof="CT_CLASS" modifiers="public" name="ReusableInstances" since="0.0.2" type="chav1961.purelib.basic.ReusableInstances"><overview xmlns=""> This utility class can be used to reduce memory garbage. It contains a cache repository with the reused instances of any referenced class. It also supports two operations on it:


 
 
* **allocate** new instance of the given class (see 

* #allocate() method)

 
* **free** instance of the given class was allocated earlier (see 

* #free(Object) method)

 
 When cache repository is empty on allocation request, it //creates// a new instance of the given class by calling [[//ReusableInstances/TrueConstructor|TrueConstructor]] functional interface to produce it. When cache repository is not empty
 on allocation request, it //prepares// any 'old' instance form the cache repository by calling [[//ReusableInstances/PseudoConstructor|PseudoConstructor]] functional interface and returns it as a 'newly created' instance. Pseudoconstructor must
 restore all the instance fields into it's initial state. To avoid problems with the restoring, use the final fields in the instance class accurately.


 All the functionality of the class is similar to the **malloc()/free()** functions in the standard C language library. The class implements [[AutoCloseable|AutoCloseable]] interface and we strongly recommend to use it in the 
 **try-with-resource** statements. If you doen't need to prepare 'old' instance, don't pass [[//ReusableInstances/PseudoConstructor|PseudoConstructor]] instance in this class - this strongly increases allocation performance.

     
  
 This class can be used in the multi-thread environment


 

* &lt;T&gt; instance class to keep in the cache repository 
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public synchronized" name="allocate" since="@inherited" type="T"><overview xmlns=""> Allocate new instance and pass it to the user


 

//Returns://instance allocated
</overview></method><method modifiers="public synchronized" name="free" since="@inherited" type="void"><overview xmlns=""> Free instance allocated and return it to cache


 

* **instance** instance to free
 

* [[NullPointerException|NullPointerException]] :  instance is null
</overview><parameter name="instance" type="T"/></method><method modifiers="public synchronized" name="close" since="@inherited" type="void"><overview xmlns=""/></method></class><class inside="ReusableInstances" kindof="CT_INTERFACE" modifiers="public static interface" name="ReusableInstances.TrueConstructor" since="0.0.2" type="chav1961.purelib.basic.ReusableInstances.TrueConstructor"><overview xmlns=""> This interface returns newly created instance to use in the cache


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public" name="create" since="@inherited" type="T"><overview xmlns=""> Really create new instance of the class


 

//Returns://instance created
</overview></method></class><class inside="ReusableInstances" kindof="CT_INTERFACE" modifiers="public static interface" name="ReusableInstances.PseudoConstructor" since="0.0.2" type="chav1961.purelib.basic.ReusableInstances.PseudoConstructor"><overview xmlns=""> This iterface resets existent instance if the class to the initial state


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public" name="prepare" since="@inherited" type="T"><overview xmlns=""> Prepare existent instance for reusing


 

* **instance** class instance to prepare 
 

//Returns://instance prepared. Must be the same as instance parameter 
</overview><parameter name="instance" type="T"/></method></class><class extends="java.util.logging.Logger" implements="[chav1961.purelib.basic.interfaces.LoggerFacade]" kindof="CT_CLASS" modifiers="public" name="PureLogger" since="0.0.2" type="chav1961.purelib.basic.PureLogger"><overview xmlns=""> This class is a wrapper for [[LoggerFacade|LoggerFacade]] to the standard JRE [[Logger|Logger]] functionality.


  
 

//See also://  [[LoggerFacade|LoggerFacade]]
 

//See also://  [[//AbstractLoggerFacade|AbstractLoggerFacade]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public" name="message" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="level" type="chav1961.purelib.basic.interfaces.LoggerFacade.Severity"/><parameter name="format" type="java.lang.String"/><parameter name="parameters" type="java.lang.Object[]"/></method><method modifiers="public" name="message" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="level" type="chav1961.purelib.basic.interfaces.LoggerFacade.Severity"/><parameter name="callback" type="chav1961.purelib.basic.interfaces.LoggerFacade.LoggerCallbackInterface"/></method><method modifiers="public" name="message" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="level" type="chav1961.purelib.basic.interfaces.LoggerFacade.Severity"/><parameter name="exception" type="java.lang.Throwable"/><parameter name="format" type="java.lang.String"/><parameter name="parameters" type="java.lang.Object[]"/></method><method modifiers="public" name="message" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="level" type="chav1961.purelib.basic.interfaces.LoggerFacade.Severity"/><parameter name="exception" type="java.lang.Throwable"/><parameter name="callback" type="chav1961.purelib.basic.interfaces.LoggerFacade.LoggerCallbackInterface"/></method><method modifiers="public" name="isLoggedNow" since="@inherited" type="boolean"><overview xmlns=""/><parameter name="level" type="chav1961.purelib.basic.interfaces.LoggerFacade.Severity"/></method><method modifiers="public" name="getReducing" since="@inherited" type="java.util.Set&lt;chav1961.purelib.basic.interfaces.LoggerFacade.Reducing&gt;"><overview xmlns=""/></method><method modifiers="public" name="setReducing" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="reducing" type="java.util.Set&lt;chav1961.purelib.basic.interfaces.LoggerFacade.Reducing&gt;"/></method><method modifiers="public" name="setReducing" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="reducing" type="chav1961.purelib.basic.interfaces.LoggerFacade.Reducing[]"/></method><method modifiers="public" name="pushReducing" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="reducing" type="java.util.Set&lt;chav1961.purelib.basic.interfaces.LoggerFacade.Reducing&gt;"/></method><method modifiers="public" name="pushReducing" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="reducing" type="chav1961.purelib.basic.interfaces.LoggerFacade.Reducing[]"/></method><method modifiers="public" name="popReducing" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/></method><method modifiers="public" name="transaction" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="mark" type="java.lang.String"/></method><method modifiers="public" name="rollback" since="@inherited" type="void"><overview xmlns=""/></method><method modifiers="public" name="close" since="@inherited" type="void"><overview xmlns=""/></method></class><class extends="java.lang.Object" kindof="CT_CLASS" modifiers="public" name="PureLibSettings" since="0.0.2 last update 0.0.3" type="chav1961.purelib.basic.PureLibSettings"><overview xmlns=""> This class keeps basic settings for the Pure Library. You can use default settings for the Pure Library environment (file **purelib.default.properties** inside the purelib jar) or
 can import explicit settings by the **-D

* #SETTINGS_KEY** variable when starting java application. This class must be used by it's singleton instance by calling 

* #instance()
 static method. Content got from **-D

* #SETTINGS_KEY** source will be joined with the default settings from **purelib.default.properties** and has higher priority related to **purelib.default.properties**.
 This class also contains few static useful methods to process settings


 Inner logger in the class is used to print out any internal problems in the Pure Library. It uses standard [[Logger|Logger]] functionality. Logger name is **"chav1961.purelib"**. You can
 control it by the standard Java logging mechanism


 Inner [[Timer|Timer]] in the class is used to process different sorts of maintenance, required by Pure Library components. Timer works with a daemon thread and needs no action on application terminating

    
 
 

//See also://  [[//SubstitutableProperties|SubstitutableProperties]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2 last update 0.0.3
</overview><field modifiers="public static final" name="logger" since="@inherited" type="java.util.logging.Logger"><overview xmlns=""> This logger is used to print put any internal problems in the Pure Library


</overview></field><field modifiers="public static final" name="CURRENT_PID" since="@inherited" type="long"><overview xmlns=""> Current Java process id


</overview></field><field modifiers="public static final" name="CURRENT_VERSION" since="@inherited" type="java.lang.String"><overview xmlns=""> This is current version of the Pure Library


</overview></field><field modifiers="public static final" name="VENDOR" since="@inherited" type="java.lang.String"><overview xmlns=""> This is a vendor of the Pure Library


</overview></field><field modifiers="public static final" name="SETTINGS_KEY" since="@inherited" type="java.lang.String"><overview xmlns=""> This is **-D** variable name to import content to the settings repository


</overview></field><field modifiers="public static final" name="UI_SWING_MANDATORY_BACKGROUND" since="@inherited" type="java.lang.String"><overview xmlns=""> Default mandatory field background for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_MANDATORY_FOREGROUND" since="@inherited" type="java.lang.String"><overview xmlns=""> Default mandatory field foreground for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_MANDATORY_FOREGROUND_NEGATIVE" since="@inherited" type="java.lang.String"><overview xmlns=""> Default negative mandatory field foreground for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_MANDATORY_FOREGROUND_ZERO" since="@inherited" type="java.lang.String"><overview xmlns=""> Default zero mandatory field foreground for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_MANDATORY_FOREGROUND_POSITIVE" since="@inherited" type="java.lang.String"><overview xmlns=""> Default positive mandatory field foreground for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_MANDATORY_SELECTED" since="@inherited" type="java.lang.String"><overview xmlns=""> Default selection background in the mandatory field for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_MANDATORY_SELECTED_TEXT" since="@inherited" type="java.lang.String"><overview xmlns=""> Default selection color in the mandatory field for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_OPTIONAL_BACKGROUND" since="@inherited" type="java.lang.String"><overview xmlns=""> Default optional field background for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_OPTIONAL_FOREGROUND" since="@inherited" type="java.lang.String"><overview xmlns=""> Default optional field foreground for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_OPTIONAL_FOREGROUND_NEGATIVE" since="@inherited" type="java.lang.String"><overview xmlns=""> Default optional negative field foreground for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_OPTIONAL_FOREGROUND_ZERO" since="@inherited" type="java.lang.String"><overview xmlns=""> Default optional zero field foreground for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_OPTIONAL_FOREGROUND_POSITIVE" since="@inherited" type="java.lang.String"><overview xmlns=""> Default optional positive field foreground for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_OPTIOAL_SELECTED" since="@inherited" type="java.lang.String"><overview xmlns=""> Default selection background in the mandatory field for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_OPTIOAL_SELECTED_TEXT" since="@inherited" type="java.lang.String"><overview xmlns=""> Default selection color in the mandatory field for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_READONLY_BACKGROUND" since="@inherited" type="java.lang.String"><overview xmlns=""> Default optional field background for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_READONLY_FOREGROUND" since="@inherited" type="java.lang.String"><overview xmlns=""> Default optional field foreground for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_NEGATIVEMARK_FOREGROUND" since="@inherited" type="java.lang.String"><overview xmlns=""> Default negative mark field foreground for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_POSITIVEMARK_FOREGROUND" since="@inherited" type="java.lang.String"><overview xmlns=""> Default positive mark field foreground for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_ZEROMARK_FOREGROUND" since="@inherited" type="java.lang.String"><overview xmlns=""> Default zero mark field foreground for UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_DATEPICKER_DAY_NAME_COLOR" since="@inherited" type="java.lang.String"><overview xmlns=""/></field><field modifiers="public static final" name="UI_SWING_DATEPICKER_WEEKEND_NAME_COLOR" since="@inherited" type="java.lang.String"><overview xmlns=""/></field><field modifiers="public static final" name="UI_SWING_DATEPICKER_DAY_VALUE_COLOR" since="@inherited" type="java.lang.String"><overview xmlns=""/></field><field modifiers="public static final" name="UI_SWING_DATEPICKER_WEEKEND_VALUE_COLOR" since="@inherited" type="java.lang.String"><overview xmlns=""/></field><field modifiers="public static final" name="UI_SWING_TOOLBAR_CLICK_BORDER_COLOR" since="@inherited" type="java.lang.String"><overview xmlns=""> Default border color for clicked toolbar button in the UI forms


</overview></field><field modifiers="public static final" name="UI_SWING_TOOLTIP_BORDER_COLOR" since="@inherited" type="java.lang.String"><overview xmlns=""> Default border color for the tooltips in the UI forms


</overview></field><field modifiers="public static final" name="ALLOW_UNSAFE" since="@inherited" type="java.lang.String"><overview xmlns=""> Allow Unsafe functionality in the Pure Library


</overview></field><field modifiers="public static final" name="PRINT_EXPANDED_MACROS" since="@inherited" type="java.lang.String"><overview xmlns=""> Print expanded macros of the AsmWriter for debugging purposes


</overview></field><field modifiers="public static final" name="MIME_PLAIN_TEXT" since="@inherited" type="javax.activation.MimeType"><overview xmlns=""> MIME for plain text


</overview></field><field modifiers="public static final" name="MIME_CREOLE_TEXT" since="@inherited" type="javax.activation.MimeType"><overview xmlns=""> MIME for CREOLE text


</overview></field><field modifiers="public static final" name="MIME_HTML_TEXT" since="@inherited" type="javax.activation.MimeType"><overview xmlns=""> MIME for HTML text


</overview></field><field modifiers="public static final" name="MIME_XML_TEXT" since="@inherited" type="javax.activation.MimeType"><overview xmlns=""> MIME for XML text


</overview></field><field modifiers="public static final" name="MIME_JSON_TEXT" since="@inherited" type="javax.activation.MimeType"><overview xmlns=""> MIME for JSON


</overview></field><field modifiers="public static final" name="MIME_CSS_TEXT" since="@inherited" type="javax.activation.MimeType"><overview xmlns=""> MIME for CSS


</overview></field><field modifiers="public static final" name="MIME_FAVICON" since="@inherited" type="javax.activation.MimeType"><overview xmlns=""> MIME for CSS


</overview></field><field modifiers="public static final" name="MIME_OCTET_STREAM" since="@inherited" type="javax.activation.MimeType"><overview xmlns=""> MIME for octet stream


</overview></field><field modifiers="public static final" name="PURELIB_LOCALIZER" since="@inherited" type="chav1961.purelib.i18n.interfaces.Localizer"><overview xmlns=""> Common-accessible localizer for the Pure Library

 
</overview></field><field modifiers="public static final" name="NULL_LOGGER" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""> Null logger facade for any purposes


</overview></field><field modifiers="public static final" name="COMMON_MAINTENANCE_TIMER" since="@inherited" type="java.util.Timer"><overview xmlns=""> Shared timer to process common maintenance for any pure library consumers


</overview></field><method modifiers="public static" name="instance" since="@inherited" type="chav1961.purelib.basic.SubstitutableProperties"><overview xmlns=""> Static singleton instance to get access to the purelib settings. Instance is a [[//SubstitutableProperties|SubstitutableProperties]] object and supports all it's functionality

   
 

//Returns://singleton instance of the Pure Library settings
</overview></method><method modifiers="public static" name="colorByName" since="@inherited" type="java.awt.Color"><overview xmlns=""> Convert color name to it's [[Color|Color]] representation


 

* **name** name to convert
 

* **defaultColor** default Color instance if name can't be converted
 

//Returns://Color converted. Can't be null
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if color name is null or empty
</overview><parameter name="name" type="java.lang.String"/><parameter name="defaultColor" type="java.awt.Color"/></method><method modifiers="public static" name="nameByColor" since="@inherited" type="java.lang.String"><overview xmlns=""> Convert [[Color|Color]] instance to it's symbolic name


 

* **color** color to convert
 

* **defaultName** default name if color can't be converted
 

//Returns://Color name or default name
 

* [[NullPointerException|NullPointerException]] :  if color instance to convert is null
</overview><parameter name="color" type="java.awt.Color"/><parameter name="defaultName" type="java.lang.String"/></method></class><class extends="java.lang.ClassLoader" implements="[java.lang.AutoCloseable]" kindof="CT_CLASS" modifiers="public" name="PluggableClassLoader" since="0.0.1 last update 0.0.2" type="chav1961.purelib.basic.PluggableClassLoader"><overview xmlns=""> This class is an implementation of class loader, that can install and uninstall jars with the additional classes on-the-fly.
 This class is designed to use with the [[FileSystemInterface|FileSystemInterface]] data sources and extends ability to keep classes in the different
 sources


 This class loader is a collection of //internal// class loaders, every of this loads it's own plugin. The overridden 
 

* #loadClass(String, boolean) method of this class loader tries to find appropriative classes in the each class loader
 in the collection. When one of the plugins will be uninstalled, find fails.


 The template to use this class is:


 {{{code}}}PluggableClassLoader pcl = new PluggableClassLoader(parent);
 pcl.install(...) // install new plugin
 Class cl = pcl.loadClass("Class.Name") // get any class from the plugin loaded
 // use plugin class
 pcl.uninstall(...) // uninstall existent plugin
 


 **WARNING!** Don't use [[Class|#forName(String, boolean, ClassLoader)]] method to load classes from this loader, because
 this method has an internal cache for all classes loaded, and this cache doesn't clear when the plugin will be uninstalled


 This class is not thread-safe.


 
 

//See also://  [[java.lang.ClassLoader|java.lang.ClassLoader]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.1 last update 0.0.2
</overview><method modifiers="public" name="close" since="@inherited" type="void"><overview xmlns=""/></method><method modifiers="protected" name="findClass" since="@inherited" type="java.lang.Class&lt;?&gt;"><overview xmlns=""/><parameter name="className" type="java.lang.String"/></method><method modifiers="protected" name="loadClass" since="@inherited" type="java.lang.Class&lt;?&gt;"><overview xmlns=""/><parameter name="className" type="java.lang.String"/><parameter name="resolve" type="boolean"/></method><method modifiers="public" name="install" since="@inherited" type="void"><overview xmlns=""/><parameter name="name" type="java.lang.String"/><parameter name="description" type="java.lang.String"/><parameter name="content" type="chav1961.purelib.fsys.interfaces.FileSystemInterface"/></method><method modifiers="public" name="uninstall" since="@inherited" type="void"><overview xmlns=""/><parameter name="name" type="java.lang.String"/></method><method modifiers="public" name="wasInstalled" since="@inherited" type="boolean"><overview xmlns=""/><parameter name="name" type="java.lang.String"/></method><method modifiers="public" name="getDescription" since="@inherited" type="java.lang.String"><overview xmlns=""/><parameter name="name" type="java.lang.String"/></method><method modifiers="public" name="installed" since="@inherited" type="java.lang.String[]"><overview xmlns=""/></method></class><class extends="java.lang.Object" implements="[chav1961.purelib.basic.interfaces.SyntaxTreeInterface&lt;Cargo&gt;]" kindof="CT_CLASS" modifiers="public" name="OrdinalSyntaxTree" since="0.0.3" type="chav1961.purelib.basic.OrdinalSyntaxTree"><overview xmlns=""> This class is an ordinal implementation of [[SyntaxTreeInterface|SyntaxTreeInterface]] interface. It can be used everywhere when [[//AndOrTree|AndOrTree]] can.


 This class is not thread-safe


 
 

* &lt;Cargo&gt; any king of data associated with the tree elements
 
 

//See also://  [[SyntaxTreeInterface|SyntaxTreeInterface]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.3
</overview><method modifiers="public" name="placeName" since="@inherited" type="long"><overview xmlns=""/><parameter name="value" type="char[]"/><parameter name="from" type="int"/><parameter name="to" type="int"/><parameter name="cargo" type="Cargo"/></method><method modifiers="public" name="placeOrChangeName" since="@inherited" type="long"><overview xmlns=""/><parameter name="value" type="char[]"/><parameter name="from" type="int"/><parameter name="to" type="int"/><parameter name="cargo" type="Cargo"/></method><method modifiers="public" name="placeName" since="@inherited" type="long"><overview xmlns=""/><parameter name="name" type="java.lang.String"/><parameter name="cargo" type="Cargo"/></method><method modifiers="public" name="placeOrChangeName" since="@inherited" type="long"><overview xmlns=""/><parameter name="name" type="java.lang.String"/><parameter name="cargo" type="Cargo"/></method><method modifiers="public" name="placeName" since="@inherited" type="long"><overview xmlns=""/><parameter name="value" type="char[]"/><parameter name="from" type="int"/><parameter name="to" type="int"/><parameter name="id" type="long"/><parameter name="cargo" type="Cargo"/></method><method modifiers="public" name="placeOrChangeName" since="@inherited" type="long"><overview xmlns=""/><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="to" type="int"/><parameter name="id" type="long"/><parameter name="cargo" type="Cargo"/></method><method modifiers="public" name="placeName" since="@inherited" type="long"><overview xmlns=""/><parameter name="name" type="java.lang.String"/><parameter name="id" type="long"/><parameter name="cargo" type="Cargo"/></method><method modifiers="public" name="placeOrChangeName" since="@inherited" type="long"><overview xmlns=""/><parameter name="name" type="java.lang.String"/><parameter name="id" type="long"/><parameter name="cargo" type="Cargo"/></method><method modifiers="public" name="seekName" since="@inherited" type="long"><overview xmlns=""/><parameter name="value" type="char[]"/><parameter name="from" type="int"/><parameter name="to" type="int"/></method><method modifiers="public" name="seekName" since="@inherited" type="long"><overview xmlns=""/><parameter name="name" type="java.lang.String"/></method><method modifiers="public" name="removeName" since="@inherited" type="boolean"><overview xmlns=""/><parameter name="id" type="long"/></method><method modifiers="public" name="getCargo" since="@inherited" type="Cargo"><overview xmlns=""/><parameter name="id" type="long"/></method><method modifiers="public" name="setCargo" since="@inherited" type="void"><overview xmlns=""/><parameter name="id" type="long"/><parameter name="cargo" type="Cargo"/></method><method modifiers="public" name="contains" since="@inherited" type="boolean"><overview xmlns=""/><parameter name="id" type="long"/></method><method modifiers="public" name="getNameLength" since="@inherited" type="int"><overview xmlns=""/><parameter name="id" type="long"/></method><method modifiers="public" name="getName" since="@inherited" type="java.lang.String"><overview xmlns=""/><parameter name="id" type="long"/></method><method modifiers="public" name="getName" since="@inherited" type="int"><overview xmlns=""/><parameter name="id" type="long"/><parameter name="target" type="char[]"/><parameter name="from" type="int"/></method><method modifiers="public" name="compareNames" since="@inherited" type="int"><overview xmlns=""/><parameter name="first" type="long"/><parameter name="second" type="long"/></method><method modifiers="public" name="walk" since="@inherited" type="void"><overview xmlns=""/><parameter name="walker" type="chav1961.purelib.basic.interfaces.SyntaxTreeInterface.Walker&lt;Cargo&gt;"/></method><method modifiers="public" name="size" since="@inherited" type="long"><overview xmlns=""/></method><method modifiers="public" name="clear" since="@inherited" type="void"><overview xmlns=""/></method></class><class extends="chav1961.purelib.basic.AbstractLoggerFacade" kindof="CT_CLASS" modifiers="public" name="NullLoggerFacade" since="0.0.1" type="chav1961.purelib.basic.NullLoggerFacade"><overview xmlns=""> This class is an implementation of [[LoggerFacade|LoggerFacade]] interface for the empty target log file.


 This class is not thread-safe.


 
 

//See also://  [[LoggerFacade|LoggerFacade]]
 

//See also://  [[//AbstractLoggerFacade|AbstractLoggerFacade]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.1
</overview><method modifiers="protected" name="getAbstractLoggerFacade" since="@inherited" type="chav1961.purelib.basic.AbstractLoggerFacade"><overview xmlns=""/><parameter name="mark" type="java.lang.String"/><parameter name="root" type="java.lang.Class&lt;?&gt;"/></method><method modifiers="protected" name="toLogger" since="@inherited" type="void"><overview xmlns=""/><parameter name="level" type="chav1961.purelib.basic.interfaces.LoggerFacade.Severity"/><parameter name="text" type="java.lang.String"/><parameter name="throwable" type="java.lang.Throwable"/></method></class><class extends="java.lang.Object" kindof="CT_CLASS" modifiers="public" name="LongIdMap" since="0.0.2 last update 0.0.3" type="chav1961.purelib.basic.LongIdMap"><overview xmlns=""> This class implements a special king of map, oriented to use with [[//AndOrTree|AndOrTree]] class. It can be also used to manipulate
 with the identifiers was generated and used by [[//AndOrTree|AndOrTree]].


 
 

* &lt;T&gt; any king of data associated with the tree elements
 
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2 last update 0.0.3
</overview><method modifiers="public" name="put" since="@inherited" type="chav1961.purelib.basic.LongIdMap&lt;T&gt;"><overview xmlns=""> Put key/value pait into map


 

* **id** key of the pair
 

* **cargo** value of the pair
 

//Returns://self
 

* [[NullPointerException|NullPointerException]] :  cargo is null
</overview><parameter name="id" type="long"/><parameter name="cargo" type="T"/></method><method modifiers="public" name="contains" since="@inherited" type="boolean"><overview xmlns=""> Does id contain in the map


 

* **id** id to test
 

//Returns://true if contains
</overview><parameter name="id" type="long"/></method><method modifiers="public" name="get" since="@inherited" type="T"><overview xmlns=""> Get value by key


 

* **id** key to get value for
 

//Returns://value associated or null if missing
</overview><parameter name="id" type="long"/></method><method modifiers="public" name="remove" since="@inherited" type="T"><overview xmlns=""/><parameter name="id" type="long"/></method><method modifiers="public" name="maxValue" since="@inherited" type="long"><overview xmlns=""/></method><method modifiers="public" name="firstFree" since="@inherited" type="long"><overview xmlns=""/></method><method modifiers="public" name="toString" since="@inherited" type="java.lang.String"><overview xmlns=""/></method></class><class extends="java.lang.Object" implements="[java.io.Closeable]" kindof="CT_CLASS" modifiers="public" name="LineByLineProcessor" since="0.0.1, last changes 0.0.2" type="chav1961.purelib.basic.LineByLineProcessor"><overview xmlns=""> This utility class supports line-by-line processing for the character streams. It parses the input stream data, defines line locations in it, calculates sequential number for the lines found
 and pass it to callback for longer processing

 
 
 The main idea of this class is to reduce data moving when character stream is parsing. //Line// is any character sequence, terminated with '\n' char. Source data for this class is a lot of of character arrays 
 are passing to the [[//LineByLineProcessor|#write(char[],int,int) write]] method of the class. This class parse every character array, find all the lines in them, and sequentially send all the lines found to the callback 
 for longer processing. If some line is located in more than one input piece of data, this class builds the line from all pieces and also send in to the callback. It's the only case when the class uses any data moving. 
 In all other cases this class passes the source data directly to the callback.


 
 Class logic guarantees, that all the lines are passing to the callback will be terminated with '\n' char, including the same last line in the source data. Char '\r' also can presents in the callback data as option


 This class implements [[java|.io.Closeable Closeable]] interface, so it can be used in the **try-with-resource** statements.


 This class is not thread-safe.


 
 

//See also://  [[java.io.Writer|java.io.Writer]] [[Writer|Writer]]
 

//See also://  [[chav1961.purelib.basic.interfaces.LineByLineProcessorCallback|chav1961.purelib.basic.interfaces.LineByLineProcessorCallback]] [[ILineByLineProcessorCallback|ILineByLineProcessorCallback]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.1, last changes 0.0.2
</overview><method modifiers="public" name="close" since="@inherited" type="void"><overview xmlns=""/></method><method modifiers="public" name="write" since="@inherited" type="void"><overview xmlns=""> Process the next piece of source data. This method is similar to [[java|.io.Writer#write(char[],int,int) Writer.write(char[],int,int)]] method.

 
 

* **cbuf** char arrays containing source data
 

* **off** offset inside the source array to use as data beginning
 

* **len** length of data need to process
 

* [[IOException|IOException]] :  if any I/O exceptions were detected
 

* [[SyntaxException|SyntaxException]] :  if any syntax problems was detected 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  any parameter's problems
</overview><parameter name="cbuf" type="char[]"/><parameter name="off" type="int"/><parameter name="len" type="int"/></method><method modifiers="protected" name="uncheckedWrite" since="@inherited" type="void"><overview xmlns=""/><parameter name="cbuf" type="char[]"/><parameter name="off" type="int"/><parameter name="len" type="int"/></method><method modifiers="public" name="write" since="@inherited" type="void"><overview xmlns=""> Process data from the reader until EOF will be detected


 

* **rdr** reader to process data from
 

* [[IOException|IOException]] :  if any I/O exceptions were detected
 

* [[SyntaxException|SyntaxException]] :  if any syntax problems were detected
 

* [[IllegalArgumentException|IllegalArgumentException]] :  any parameter's problems
</overview><parameter name="rdr" type="java.io.Reader"/></method><method modifiers="public" name="pushProcessing" since="0.0.2" type="void"><overview xmlns=""> Pushes processing on any state and save tail content for longer using. Can be used inside callback to switch source for this class

 
 

* [[IOException|IOException]] :  is any I/O errors were detected on this call
 

* [[SyntaxException|SyntaxException]] :  if any syntax errors were detected in this call
 

//Since:// 0.0.2
</overview></method><method modifiers="public" name="popProcessing" since="0.0.2" type="void"><overview xmlns=""> Pops processing and return to the tail of previously saved content


 

* [[IOException|IOException]] :  is any I/O errors were detected on this call
 

* [[SyntaxException|SyntaxException]] :  if any syntax errors were detected in this call
 

//Since:// 0.0.2
</overview></method></class><class extends="java.lang.Object" kindof="CT_CLASS" modifiers="public" name="GettersAndSettersFactory" since="0.0.2" type="chav1961.purelib.basic.GettersAndSettersFactory"><overview xmlns=""> This class contains a factory method to build getters and setters for primitive and referenced items in the class and/or it's instance. All the 
 getters an setters implements marker interface [[//GettersAndSettersFactory/GetterAndSetter|GetterAndSetter]] that can be used as the type of variable to store getters and setters built. 
 All the getters and setters are not extends any common parent class, so can't be converted each other. Getters and setters support either primitive data 
 type or referenced data type. Each primitive type has own specific getter and setter to avoid wrapping/unwrapping during data access. Total list of the 
 getters and setters is:


 
 
* [[//GettersAndSettersFactory/BooleanGetterAndSetter|BooleanGetterAndSetter]] - allow access to **boolean** fields in the class or instance

 
* [[//GettersAndSettersFactory/ByteGetterAndSetter|ByteGetterAndSetter]] - allow access to **byte** fields in the class or instance

 
* [[//GettersAndSettersFactory/CharGetterAndSetter|CharGetterAndSetter]] - allow access to **char** fields in the class or instance

 
* [[//GettersAndSettersFactory/DoubleGetterAndSetter|DoubleGetterAndSetter]] - allow access to **double** fields in the class or instance

 
* [[//GettersAndSettersFactory/FloatGetterAndSetter|FloatGetterAndSetter]] - allow access to **float** fields in the class or instance

 
* [[//GettersAndSettersFactory/IntGetterAndSetter|IntGetterAndSetter]] - allow access to **int** fields in the class or instance

 
* [[//GettersAndSettersFactory/LongGetterAndSetter|LongGetterAndSetter]] - allow access to **long** fields in the class or instance

 
* [[//GettersAndSettersFactory/ShortGetterAndSetter|ShortGetterAndSetter]] - allow access to **short** fields in the class or instance

 
* [[//GettersAndSettersFactory/ObjectGetterAndSetter|ObjectGetterAndSetter]] - allow access to referenced fields in the class or instance

 
 Every getter and setter contains two methods:


 
 
* get(T instance) - get field value from the class or instance

 
* set(T instance, V value) - set field value in the class or instance

 
 According to configuration parameters and field properties, getters and setters can be implemented as:


 
 
* wrapper to the [[sun|.misc.Unsafe]] functionality

 
* hard-coded on-the-fly built inner class (use [[AsmWriter|AsmWriter]]) functionality

 
* wrapper to the [[MethodHandle|MethodHandle]] functionality

 
 The first variant is implemented if and only if [[//PureLibSettings|#ALLOW_UNSAFE]] flag in the Pure Library configuration 
 is set to **true** and application has access to [[sun|.misc.Unsafe]] instance. The second one is implemented for the public
 fields only. All other cases produce the third variant.

 
 
 

//See also://  [[sun.misc.Unsafe|sun.misc.Unsafe]]
 

//See also://  [[chav1961.purelib.basic.PureLibSettings|chav1961.purelib.basic.PureLibSettings]]
 

//See also://  [[chav1961.purelib.streams.char2byte.AsmWriter|chav1961.purelib.streams.char2byte.AsmWriter]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public static" name="clearCache" since="@inherited" type="void"><overview xmlns=""/></method><method modifiers="public static" name="buildGetterAndSetter" since="@inherited" type="chav1961.purelib.basic.GettersAndSettersFactory.GetterAndSetter"><overview xmlns=""> Build getter and setter for the given field in the class or instance.


 

* &lt;T&gt; instance to build getter and setter for
 

* **awaited** class containing field to get access to
 

* **fieldName** field name to get access to
 

//Returns://getter and setter built
 

* [[ContentException|ContentException]] :  on any building errors
 

* [[IllegalArgumentException|IllegalArgumentException]] :  field name is null, empty or is missing in the class
 

* [[NullPointerException|NullPointerException]] :  awaited class is null
</overview><parameter name="awaited" type="java.lang.Class&lt;T&gt;"/><parameter name="fieldName" type="java.lang.String"/></method></class><class inside="GettersAndSettersFactory" kindof="CT_INTERFACE" modifiers="public static interface" name="GettersAndSettersFactory.GetterAndSetter" since="0.0.2" type="chav1961.purelib.basic.GettersAndSettersFactory.GetterAndSetter"><overview xmlns=""> This interface can be used as type of variable to store any getter and setter instance. All getters and setters implement 
 this interface, so all of them can be casted to it


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview></class><class extends="java.lang.Object" implements="[chav1961.purelib.basic.GettersAndSettersFactory.GetterAndSetter]" inside="GettersAndSettersFactory" kindof="CT_CLASS" modifiers="public abstract static" name="GettersAndSettersFactory.BooleanGetterAndSetter" since="0.0.2" type="chav1961.purelib.basic.GettersAndSettersFactory.BooleanGetterAndSetter"><overview xmlns=""> This class implements getter and setter to the primitive boolean field in the class or instance


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public abstract" name="get" since="@inherited" type="boolean"><overview xmlns=""> Get field value as primitive boolean


 

* **instance** instance to get value from. Is the field is static, this parameter will be ignored 
 

//Returns://boolean value for the given field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/></method><method modifiers="public abstract" name="set" since="@inherited" type="void"><overview xmlns=""> Set field value as primitive boolean


 

* **instance** instance to set value in. Is the field is static, this parameter will be ignored
 

* **value** value to set to the field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/><parameter name="value" type="boolean"/></method></class><class extends="java.lang.Object" implements="[chav1961.purelib.basic.GettersAndSettersFactory.GetterAndSetter]" inside="GettersAndSettersFactory" kindof="CT_CLASS" modifiers="public abstract static" name="GettersAndSettersFactory.ByteGetterAndSetter" since="0.0.2" type="chav1961.purelib.basic.GettersAndSettersFactory.ByteGetterAndSetter"><overview xmlns=""> This class implements getter and setter to the primitive byte field in the class or instance


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public abstract" name="get" since="@inherited" type="byte"><overview xmlns=""> Get field value as primitive byte


 

* **instance** instance to get value from. Is the field is static, this parameter will be ignored 
 

//Returns://boolean value for the given field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/></method><method modifiers="public abstract" name="set" since="@inherited" type="void"><overview xmlns=""> Set field value as primitive byte


 

* **instance** instance to set value in. Is the field is static, this parameter will be ignored
 

* **value** value to set to the field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/><parameter name="value" type="byte"/></method></class><class extends="java.lang.Object" implements="[chav1961.purelib.basic.GettersAndSettersFactory.GetterAndSetter]" inside="GettersAndSettersFactory" kindof="CT_CLASS" modifiers="public abstract static" name="GettersAndSettersFactory.CharGetterAndSetter" since="0.0.2" type="chav1961.purelib.basic.GettersAndSettersFactory.CharGetterAndSetter"><overview xmlns=""> This class implements getter and setter to the primitive char field in the class or instance


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public abstract" name="get" since="@inherited" type="char"><overview xmlns=""> Get field value as primitive char


 

* **instance** instance to get value from. Is the field is static, this parameter will be ignored 
 

//Returns://boolean value for the given field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/></method><method modifiers="public abstract" name="set" since="@inherited" type="void"><overview xmlns=""> Set field value as primitive char


 

* **instance** instance to set value in. Is the field is static, this parameter will be ignored
 

* **value** value to set to the field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/><parameter name="value" type="char"/></method></class><class extends="java.lang.Object" implements="[chav1961.purelib.basic.GettersAndSettersFactory.GetterAndSetter]" inside="GettersAndSettersFactory" kindof="CT_CLASS" modifiers="public abstract static" name="GettersAndSettersFactory.DoubleGetterAndSetter" since="0.0.2" type="chav1961.purelib.basic.GettersAndSettersFactory.DoubleGetterAndSetter"><overview xmlns=""> This class implements getter and setter to the primitive double field in the class or instance


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public abstract" name="get" since="@inherited" type="double"><overview xmlns=""> Get field value as primitive double


 

* **instance** instance to get value from. Is the field is static, this parameter will be ignored 
 

//Returns://boolean value for the given field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/></method><method modifiers="public abstract" name="set" since="@inherited" type="void"><overview xmlns=""> Set field value as primitive double


 

* **instance** instance to set value in. Is the field is static, this parameter will be ignored
 

* **value** value to set to the field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/><parameter name="value" type="double"/></method></class><class extends="java.lang.Object" implements="[chav1961.purelib.basic.GettersAndSettersFactory.GetterAndSetter]" inside="GettersAndSettersFactory" kindof="CT_CLASS" modifiers="public abstract static" name="GettersAndSettersFactory.FloatGetterAndSetter" since="0.0.2" type="chav1961.purelib.basic.GettersAndSettersFactory.FloatGetterAndSetter"><overview xmlns=""> This class implements getter and setter to the primitive float field in the class or instance


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public abstract" name="get" since="@inherited" type="float"><overview xmlns=""> Get field value as primitive float


 

* **instance** instance to get value from. Is the field is static, this parameter will be ignored 
 

//Returns://boolean value for the given field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/></method><method modifiers="public abstract" name="set" since="@inherited" type="void"><overview xmlns=""> Set field value as primitive float


 

* **instance** instance to set value in. Is the field is static, this parameter will be ignored
 

* **value** value to set to the field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/><parameter name="value" type="float"/></method></class><class extends="java.lang.Object" implements="[chav1961.purelib.basic.GettersAndSettersFactory.GetterAndSetter]" inside="GettersAndSettersFactory" kindof="CT_CLASS" modifiers="public abstract static" name="GettersAndSettersFactory.IntGetterAndSetter" since="0.0.2" type="chav1961.purelib.basic.GettersAndSettersFactory.IntGetterAndSetter"><overview xmlns=""> This class implements getter and setter to the primitive int field in the class or instance


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public abstract" name="get" since="@inherited" type="int"><overview xmlns=""> Get field value as primitive int


 

* **instance** instance to get value from. Is the field is static, this parameter will be ignored 
 

//Returns://boolean value for the given field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/></method><method modifiers="public abstract" name="set" since="@inherited" type="void"><overview xmlns=""> Set field value as primitive int


 

* **instance** instance to set value in. Is the field is static, this parameter will be ignored
 

* **value** value to set to the field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/><parameter name="value" type="int"/></method></class><class extends="java.lang.Object" implements="[chav1961.purelib.basic.GettersAndSettersFactory.GetterAndSetter]" inside="GettersAndSettersFactory" kindof="CT_CLASS" modifiers="public abstract static" name="GettersAndSettersFactory.LongGetterAndSetter" since="0.0.2" type="chav1961.purelib.basic.GettersAndSettersFactory.LongGetterAndSetter"><overview xmlns=""> This class implements getter and setter to the primitive long field in the class or instance


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public abstract" name="get" since="@inherited" type="long"><overview xmlns=""> Get field value as primitive long


 

* **instance** instance to get value from. Is the field is static, this parameter will be ignored 
 

//Returns://boolean value for the given field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/></method><method modifiers="public abstract" name="set" since="@inherited" type="void"><overview xmlns=""> Set field value as primitive long


 

* **instance** instance to set value in. Is the field is static, this parameter will be ignored
 

* **value** value to set to the field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/><parameter name="value" type="long"/></method></class><class extends="java.lang.Object" implements="[chav1961.purelib.basic.GettersAndSettersFactory.GetterAndSetter]" inside="GettersAndSettersFactory" kindof="CT_CLASS" modifiers="public abstract static" name="GettersAndSettersFactory.ShortGetterAndSetter" since="0.0.2" type="chav1961.purelib.basic.GettersAndSettersFactory.ShortGetterAndSetter"><overview xmlns=""> This class implements getter and setter to the primitive short field in the class or instance


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public abstract" name="get" since="@inherited" type="short"><overview xmlns=""> Get field value as primitive short


 

* **instance** instance to get value from. Is the field is static, this parameter will be ignored 
 

//Returns://boolean value for the given field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/></method><method modifiers="public abstract" name="set" since="@inherited" type="void"><overview xmlns=""> Set field value as primitive short


 

* **instance** instance to set value in. Is the field is static, this parameter will be ignored
 

* **value** value to set to the field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/><parameter name="value" type="short"/></method></class><class extends="java.lang.Object" implements="[chav1961.purelib.basic.GettersAndSettersFactory.GetterAndSetter]" inside="GettersAndSettersFactory" kindof="CT_CLASS" modifiers="public abstract static" name="GettersAndSettersFactory.ObjectGetterAndSetter" since="0.0.2" type="chav1961.purelib.basic.GettersAndSettersFactory.ObjectGetterAndSetter"><overview xmlns=""> This class implements getter and setter to the referenced field in the class or instance


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public abstract" name="get" since="@inherited" type="T"><overview xmlns=""> Get field value as referenced


 

* **instance** instance to get value from. Is the field is static, this parameter will be ignored 
 

//Returns://boolean value for the given field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/></method><method modifiers="public abstract" name="set" since="@inherited" type="void"><overview xmlns=""> Set field value as referenced


 

* **instance** instance to set value in. Is the field is static, this parameter will be ignored
 

* **value** value to set to the field
 

* [[ContentException|ContentException]] :  on any access errors
</overview><parameter name="instance" type="java.lang.Object"/><parameter name="value" type="T"/></method></class><class extends="java.lang.Object" implements="[chav1961.purelib.basic.interfaces.FSMProcessor&lt;Terminal, Parameter&gt;]" kindof="CT_CLASS" modifiers="public" name="FSM" since="0.0.2" type="chav1961.purelib.basic.FSM"><overview xmlns=""> This class is an implementation of the Finite State Machine (FSM). It describes the Mile FSM. Every FSM has a FSM jump table, current state and callback associated. The main 
 method to use for FSM is 

* #processTerminal(Enum, Object) method. It scans FSM jump table, finds the current state and terminal combination, and changed current FSM state on success.
 It also calls the callback [[//FSM/FSMCallback|#process(FSM, Enum, Enum, Enum, Enum[], Object)]] method to process associated actions for the given FSM state change.


  
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2

 

* &lt;Terminal&gt; terminal (in the terms of FSM)
 

* &lt;NonTerminal&gt; non-terminal (in the terms of FSM)
 

* &lt;Exit&gt; exit symbol (in the terms of FSM)
 

* &lt;Parameter&gt; any cargo to pass thru the FSM to FSM callback
</overview><method modifiers="public final" name="processTerminal" since="@inherited" type="void"><overview xmlns=""/><parameter name="terminal" type="Terminal extends java.lang.Enum&lt;?&gt;"/><parameter name="parameter" type="Parameter"/></method><method modifiers="public" name="debugEnable" since="@inherited" type="void"><overview xmlns=""/><parameter name="logger" type="chav1961.purelib.basic.interfaces.LoggerFacade"/><parameter name="logFailures" type="boolean"/></method><method modifiers="public" name="debugDisable" since="@inherited" type="void"><overview xmlns=""/></method><method modifiers="public" name="isDebugEnable" since="@inherited" type="boolean"><overview xmlns=""/></method></class><class inside="FSM" kindof="CT_INTERFACE" modifiers="public static interface" name="FSM.FSMCallback" since="0.0.2" type="chav1961.purelib.basic.FSM.FSMCallback"><overview xmlns=""> This interface describes a callback to process successful FSM state changes.

   
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
 

* &lt;Terminal&gt; terminal (in the terms of FSM)
 

* &lt;NonTerminal&gt; non-terminal (in the terms of FSM)
 

* &lt;Exit&gt; exit symbol (in the terms of FSM)
 

* &lt;Parameter&gt; any cargo to pass thru the FSM to FSM callback
</overview><method modifiers="public" name="process" since="@inherited" type="void"><overview xmlns=""> Process callback of the FSM


 

* **fsm** fsm instance that calls this method
 

* **terminal** terminal from the {@linkplain FSM#processTerminal(Enum, Object)} method
 

* **fromState** current state of the FSM
 

* **toState** new state of the FSM
 

* **action** action list for the given state jump
 

* **parameter** parameter from the {@linkplain FSM#processTerminal(Enum, Object)} method
 

* [[FlowException|FlowException]] :  indicate any processing errors
</overview><parameter name="fsm" type="chav1961.purelib.basic.FSM&lt;Terminal, NonTerminal, Exit, Parameter&gt;"/><parameter name="terminal" type="Terminal extends java.lang.Enum&lt;?&gt;"/><parameter name="fromState" type="NonTerminal extends java.lang.Enum&lt;?&gt;"/><parameter name="toState" type="NonTerminal extends java.lang.Enum&lt;?&gt;"/><parameter name="action" type="Exit[]"/><parameter name="parameter" type="Parameter"/></method></class><class extends="java.lang.Object" inside="FSM" kindof="CT_CLASS" modifiers="public static" name="FSM.FSMLine" since="0.0.2" type="chav1961.purelib.basic.FSM.FSMLine"><overview xmlns=""> This class describes one line of the FSM jump table.


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
 

* &lt;Terminal&gt; terminal (in the terms of FSM)
 

* &lt;NonTerminal&gt; non-terminal (in the terms of FSM)
 

* &lt;Exit&gt; exit symbol (in the terms of FSM)
</overview><field modifiers="public final" name="state" since="@inherited" type="NonTerminal"><overview xmlns=""/></field><field modifiers="public final" name="terminal" since="@inherited" type="Terminal"><overview xmlns=""/></field><field modifiers="public final" name="newState" since="@inherited" type="NonTerminal"><overview xmlns=""/></field><field modifiers="public final" name="actions" since="@inherited" type="Exit[]"><overview xmlns=""/></field><method modifiers="public" name="toString" since="@inherited" type="java.lang.String"><overview xmlns=""/></method></class><class extends="chav1961.purelib.basic.BitCharSet" kindof="CT_CLASS" modifiers="public" name="ExtendedBitCharSet" since="0.0.1" type="chav1961.purelib.basic.ExtendedBitCharSet"><overview xmlns=""> This class implements a quick non-restricted set of characters.


 
 The main aim of this class is to reduce time for typical set operations for the character sets. Unlike parent class [[//BitCharSet|BitCharSet]], the class 
 supports all range of characters, but can occupy much more memory, and can work a few slowly the parent one.


 
 

//See also://  [[//BitCharSet|BitCharSet]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.1
</overview><method modifiers="public static" name="buildCharSet" since="0.0.2" type="chav1961.purelib.basic.ExtendedBitCharSet"><overview xmlns=""> Build charset via criteria


 

* **callback** callback to implements charset criteria
 

//Returns://charset built
 

* [[NullPointerException|NullPointerException]] :  when callback is null
 

//Since:// 0.0.2
</overview><parameter name="callback" type="chav1961.purelib.basic.BitCharSet.BuildCharSetCallback"/></method><method modifiers="public" name="add" since="@inherited" type="chav1961.purelib.basic.BitCharSet"><overview xmlns=""/><parameter name="symbol" type="char"/></method><method modifiers="public" name="remove" since="@inherited" type="chav1961.purelib.basic.BitCharSet"><overview xmlns=""/><parameter name="symbol" type="char"/></method><method modifiers="public" name="contains" since="@inherited" type="boolean"><overview xmlns=""/><parameter name="symbol" type="char"/></method><method modifiers="public" name="clone" since="@inherited" type="chav1961.purelib.basic.ExtendedBitCharSet"><overview xmlns=""/></method><method modifiers="public" name="toString" since="@inherited" type="java.lang.String"><overview xmlns=""/></method></class><class extends="chav1961.purelib.basic.AbstractLoggerFacade" kindof="CT_CLASS" modifiers="public" name="DefaultLoggerFacade" since="0.0.1" type="chav1961.purelib.basic.DefaultLoggerFacade"><overview xmlns=""> This class is an implementation of [[LoggerFacade|LoggerFacade]] interface for the java.util.logging package.


 This class is not thread-safe.


 
 

//See also://  [[LoggerFacade|LoggerFacade]]
 

//See also://  [[//AbstractLoggerFacade|AbstractLoggerFacade]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.1
</overview><method modifiers="protected" name="getAbstractLoggerFacade" since="@inherited" type="chav1961.purelib.basic.AbstractLoggerFacade"><overview xmlns=""/><parameter name="mark" type="java.lang.String"/><parameter name="root" type="java.lang.Class&lt;?&gt;"/></method><method modifiers="protected" name="toLogger" since="@inherited" type="void"><overview xmlns=""/><parameter name="level" type="chav1961.purelib.basic.interfaces.LoggerFacade.Severity"/><parameter name="text" type="java.lang.String"/><parameter name="throwable" type="java.lang.Throwable"/></method></class><class extends="java.lang.Object" implements="[chav1961.purelib.basic.interfaces.ConsoleManagerInterface]" kindof="CT_CLASS" modifiers="public" name="ConsoleCommandManager" since="0.0.1" type="chav1961.purelib.basic.ConsoleCommandManager"><overview xmlns=""> This class is a simplest implementation of the console command manager. It parses command line, search appropriative command line processor and invokes appropriative method in it

 
 The usual use case for any console applications is a command string. It gets the user an ability to interact with the console application by typing
 any command on the console and get a result of it's execution. To support this ability, there is a command string parser in you program. This class is
 a simplest implementation of command string parser.


 To use this class, you need:


 
 
* create an instance of this class
 
 
* write any custom class for processing of the console command you wish
 
 
* annotate the custom class with the [[chav1961|.purelib.basic.annotations.ConsoleCommand ConsoleCommand]], [[chav1961|.purelib.basic.annotations.ConsoleCommandPrefix ConsoleCommandPrefix]] and [[chav1961|.purelib.basic.annotations.ConsoleCommandParameter ConsoleCommandParameter]] annotations
 
 
* deploy your custom class into the ConsoleCommandManager instance by using 

* #deploy(Object...) deploy(Object...) command
 
 
* assign console input and output to the ConsoleCommandManager instance by using 

* #processCmd(java.io.Reader,java.io.PrintStream) processComd(Reader,PrintStream) method
 
 
 You can also use this class without assigning console input and output (for example, as console simulator). Use the 

* #processCmd(java.lang.String) processComd(String) instead. This method is thread-safe. You can also mix calling this method with the 

* #processCmd(java.io.Reader,java.io.PrintStream) processComd(Reader,PrintStream)


 You can deploy new and undeploy old console command on-the-fly, using 

* #deploy(Object...) deploy(Object...) and 

* #undeploy(Object...) undeploy(Object...) methods.

  
 The ConsoleCommandManager class is marked with the [[chav1961|.purelib.basic.annotations.ConsoleCommand ConsoleCommand]], [[chav1961|.purelib.basic.annotations.ConsoleCommandPrefix ConsoleCommandPrefix]] and [[chav1961|.purelib.basic.annotations.ConsoleCommandParameter ConsoleCommandParameter]] annotations too.
 They support processing of two default console commands:


 
 
* {{{code}}}help - prints a list of all deployed commands

 
* {{{code}}}help cmd=command_prefix - prints all templates for the given command prefix with help strings

 
 Syntax of the command templates is described in the [[chav1961|.purelib.basic.annotations.ConsoleCommand ConsoleCommand]] annotation. See 

* #processHelp() processHelp() and 

* #processHelp(java.lang.String) processHelp(String) methods for example.


 When variable parts in the console command contains special symbols (for example, file names with blank chars), use quotas(") to prevent data content against parsing, for example **{{{code}}}help "my command"**

      
 This class implements [[java|.io.Closeable Closeable]] interface, so it can be used in the **try-with-resource** statements.


 
 

//See also://  [[chav1961.purelib.basic.annotations.ConsoleCommand|chav1961.purelib.basic.annotations.ConsoleCommand]] [[@ConsoleCommand|@ConsoleCommand]]
 

//See also://  [[chav1961.purelib.basic.annotations.ConsoleCommandPrefix|chav1961.purelib.basic.annotations.ConsoleCommandPrefix]] [[@ConsoleCommandPrefix|@ConsoleCommandPrefix]]
 

//See also://  [[chav1961.purelib.basic.annotations.ConsoleCommandParameter|chav1961.purelib.basic.annotations.ConsoleCommandParameter]] [[@ConsoleCommandParameter|@ConsoleCommandParameter]]
 

//See also://  [[chav1961.purelib.basic.interfaces.ConsoleManagerInterface|chav1961.purelib.basic.interfaces.ConsoleManagerInterface]] [[ConsoleManagerInterface|ConsoleManagerInterface]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.1
</overview><method modifiers="public" name="close" since="@inherited" type="void"><overview xmlns=""/></method><method modifiers="public" name="deploy" since="@inherited" type="void"><overview xmlns=""/><parameter name="callbacks" type="java.lang.Object[]"/></method><method modifiers="public" name="undeploy" since="@inherited" type="void"><overview xmlns=""/><parameter name="callbacks" type="java.lang.Object[]"/></method><method modifiers="public" name="undeployAll" since="@inherited" type="void"><overview xmlns=""/></method><method modifiers="public synchronized" name="processCmd" since="@inherited" type="java.lang.String"><overview xmlns=""/><parameter name="cmd" type="java.lang.String"/></method><method modifiers="public" name="processCmd" since="@inherited" type="void"><overview xmlns=""/><parameter name="in" type="java.io.Reader"/><parameter name="out" type="java.io.PrintStream"/></method><method modifiers="public" name="processHelp" since="@inherited" type="java.lang.String"><overview xmlns=""/></method><method modifiers="public" name="processHelp" since="@inherited" type="java.lang.String"><overview xmlns=""/><parameter name="commandPrefix" type="java.lang.String"/></method></class><class extends="java.lang.ClassLoader" kindof="CT_CLASS" modifiers="public" name="ClassLoaderWrapper" since="0.0.2" type="chav1961.purelib.basic.ClassLoaderWrapper"><overview xmlns=""> This class is a wrapper to class loader for the current thread. It can create new class by it's definition (as byte array with class file content,
 so reader with the bytecode assembler inside [[AsmWriter|AsmWriter]].)


 The class is not thread-safe

 
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public" name="createClass" since="@inherited" type="java.lang.Class&lt;?&gt;"><overview xmlns=""> Create class by it's name and content


 

* **className** class name to create
 

* **content** class file content to create class from
 

//Returns://class created
 

* [[IllegalArgumentException|IllegalArgumentException]] :  class name is null or empty or content is null or too short
</overview><parameter name="className" type="java.lang.String"/><parameter name="content" type="byte[]"/></method><method modifiers="public" name="createClass" since="@inherited" type="java.lang.Class&lt;?&gt;"><overview xmlns=""/><parameter name="content" type="byte[]"/></method><method modifiers="public" name="createClass" since="@inherited" type="java.lang.Class&lt;?&gt;"><overview xmlns=""> Create class by it's name and bytecode assembler content


 

* **className** class name to create
 

* **content** reader containing bytecode assembler
 

//Returns://class created
 

* [[NullPointerException|NullPointerException]] :  reader is null
 

* [[IllegalArgumentException|IllegalArgumentException]] :  class name is null or empty
 

* [[IOException|IOException]] :  when any problems during class loading and definition were detected
</overview><parameter name="className" type="java.lang.String"/><parameter name="content" type="java.io.Reader"/></method><method modifiers="public static" name="toString" since="@inherited" type="java.lang.String"><overview xmlns=""> Print class content in human-readable form

 
 

* **clazz** class to print
 

//Returns://class content in the human-readable form. Can't be neither null nor empty
 

* [[NullPointerException|NullPointerException]] :  when class to print is null
</overview><parameter name="clazz" type="java.lang.Class&lt;?&gt;"/></method></class><class extends="java.lang.Object" kindof="CT_CLASS" modifiers="public" name="CharUtils" since="0.0.1 last update 0.0.2" type="chav1961.purelib.basic.CharUtils"><overview xmlns=""> This class contains implementation of the most-commonly-used char data parsing/printing functions in the system.

 
 
 All the parsing methods in the class are oriented to direct parsing of the char arrays. Every method accepts source data array
 and starting position from it to parse, and returns the position in the source array after parsing. This returned value can then be used
 in the subsequent calls as starting position. Any parsed object are returned from the methods thru the arrays of appropriative data. This 
 technique emulates call-by-reference mode for the method parameters, for example:


 {{{code}}}
 		final char[] source = "1234 1234".toCharArray(); 
 		final int[]	value1 = new int[1], value2 = new int[1]; 
  	final int	endPos1 = CharsUtil.parseInt(source,0,value1,false);				// endPos1 = 4, value1[0] = 1234 
  	final int	endPos2 = CharsUtil.parseInt(source,endPos1+1,value2,false);		// endPos2 = 9, value2[0] = 5678 
  
 All the printing methods in the class are oriented to direct filling of the char arrays. Every method accepts target data array and the 
 free starting position to fill result, and returns the new free position in the array. Negative returned value means that the target array
 is too short to keep result. It //absolute// value exactly reflect new free position in the target array and can be used to expand target
 array to required size


 
 All the methods in the class are thread-safe


  
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.1 last update 0.0.2
</overview><field modifiers="public static final" name="PREF_INT" since="@inherited" type="int"><overview xmlns=""/></field><field modifiers="public static final" name="PREF_LONG" since="@inherited" type="int"><overview xmlns=""/></field><field modifiers="public static final" name="PREF_FLOAT" since="@inherited" type="int"><overview xmlns=""/></field><field modifiers="public static final" name="PREF_DOUBLE" since="@inherited" type="int"><overview xmlns=""/></field><field modifiers="public static final" name="PREF_ANY" since="@inherited" type="int"><overview xmlns=""/></field><field modifiers="public static final" name="MAX_SUBST_DEPTH" since="@inherited" type="int"><overview xmlns=""/></field><method modifiers="public static" name="parseInt" since="@inherited" type="int"><overview xmlns=""> Extract unsigned integer value from the current position of the source data


 

* **source** source data contains character representation of the integer value
 

* **from** starting position in the source data
 

* **result** array (at least new int[1]) to store parsed value
 

* **checkOverflow** need check overflow when parsing data
 

//Returns://position of the first char in the source after successful parsing of the current integer 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="result" type="int[]"/><parameter name="checkOverflow" type="boolean"/></method><method modifiers="public static" name="parseSignedInt" since="0.0.2" type="int"><overview xmlns=""> Extract signed integer value from the current position of the source data


 

* **source** source data contains character representation of the signed integer value
 

* **from** starting position in the source data
 

* **result** array (at least new int[1]) to store parsed value
 

* **checkOverflow** need check overflow when parsing data
 

//Returns://position of the first char in the source after successful parsing of the current integer 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
 

//Since:// 0.0.2
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="result" type="int[]"/><parameter name="checkOverflow" type="boolean"/></method><method modifiers="public static" name="parseIntExtended" since="@inherited" type="int"><overview xmlns=""> Extract unsigned integer value from the current position of the source data. Differ to 

* #parseInt(char[], int, int[], boolean) supports binary, octal and hexadecimal representation of the integer constants.


 

* **source** source data contains character representation of the integer value
 

* **from** starting position in the source data
 

* **result** array (new int[1]) to store parsed value
 

* **checkOverflow** need check overflow when parsing data
 

//Returns://position of the first char in the source after successful parsing of the current integer
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="result" type="int[]"/><parameter name="checkOverflow" type="boolean"/></method><method modifiers="public static" name="parseLong" since="@inherited" type="int"><overview xmlns=""> Extract unsigned long value from the current position of the source data


 

* **source** source data contains character representation of the integer value
 

* **from** starting position in the source data
 

* **result** array (new long[1]) to store parsed value
 

* **checkOverflow** need check overflow when parsing data
 

//Returns://position of the first char in the source after successful parsing of the current integer 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="result" type="long[]"/><parameter name="checkOverflow" type="boolean"/></method><method modifiers="public static" name="parseSignedLong" since="0.0.2" type="int"><overview xmlns=""> Extract signed long value from the current position of the source data


 

* **source** source data contains character representation of the integer value
 

* **from** starting position in the source data
 

* **result** array (new long[1]) to store parsed value
 

* **checkOverflow** need check overflow when parsing data
 

//Returns://position of the first char in the source after successful parsing of the current integer 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
 

//Since:// 0.0.2
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="result" type="long[]"/><parameter name="checkOverflow" type="boolean"/></method><method modifiers="public static" name="parseLongExtended" since="@inherited" type="int"><overview xmlns=""> Extract unsigned long value from the current position of the source data. Differ to 

* #parseLong(char[], int, long[], boolean) supports binary, octal and hexadecimal representation of the integer constants.


 

* **source** source data contains character representation of the integer value
 

* **from** starting position in the source data
 

* **result** array (new long[1]) to store parsed value
 

* **checkOverflow** need check overflow when parsing data
 

//Returns://position of the first char in the source after successful parsing of the current integer
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="result" type="long[]"/><parameter name="checkOverflow" type="boolean"/></method><method modifiers="public static" name="parseFloat" since="@inherited" type="int"><overview xmlns=""> Extract unsigned float value from the current position of the source data


 

* **source** source data contains character representation of the integer value
 

* **from** starting position in the source data
 

* **result** array (new double[1]) to store parsed value
 

* **checkOverflow** need check overflow when parsing data
 

//Returns://position of the first char in the source after successful parsing of the current integer 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="result" type="float[]"/><parameter name="checkOverflow" type="boolean"/></method><method modifiers="public static" name="parseSignedFloat" since="0.0.2" type="int"><overview xmlns=""> Extract signed float value from the current position of the source data


 

* **source** source data contains character representation of the integer value
 

* **from** starting position in the source data
 

* **result** array (new double[1]) to store parsed value
 

* **checkOverflow** need check overflow when parsing data
 

//Returns://position of the first char in the source after successful parsing of the current integer 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
 

//Since:// 0.0.2
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="result" type="float[]"/><parameter name="checkOverflow" type="boolean"/></method><method modifiers="public static" name="parseDouble" since="@inherited" type="int"><overview xmlns=""> Extract unsigned double value from the current position of the source data


 

* **source** source data contains character representation of the integer value
 

* **from** starting position in the source data
 

* **result** array (new double[1]) to store parsed value
 

* **checkOverflow** need check overflow when parsing data
 

//Returns://position of the first char in the source after successful parsing of the current integer 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="result" type="double[]"/><parameter name="checkOverflow" type="boolean"/></method><method modifiers="public static" name="parseSignedDouble" since="0.0.2" type="int"><overview xmlns=""> Extract signed double value from the current position of the source data


 

* **source** source data contains character representation of the integer value
 

* **from** starting position in the source data
 

* **result** array (new double[1]) to store parsed value
 

* **checkOverflow** need check overflow when parsing data
 

//Returns://position of the first char in the source after successful parsing of the current integer 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
 

//Since:// 0.0.2
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="result" type="double[]"/><parameter name="checkOverflow" type="boolean"/></method><method modifiers="public static" name="parseNumber" since="0.0.1 last update 0.0.3" type="int"><overview xmlns=""> Extract unsigned numeric value from the current position of the source data. This method uses a //preferrable// parameter to define data type you wish to get. Available 
 preferences are described by 

* #PREF_INT, 

* #PREF_LONG, 

* #PREF_DOUBLE and 

* #PREF_ANY constants. This method always attempts to 'minimize' data type 
 for parsed value (if value is greater than maximal integer, represents data as long, and if value is greater than maximal long, represents it as double).

    
 

* **source** source data contains character representation of the integer value
 

* **from** starting position in the source data. 
 

* **result** array (new long[2]) to store parsed value. The first element contains parsed value, the second - current data type of the value ({@link #PREF_INT}, {@link #PREF_LONG}
 or 

* #PREF_DOUBLE). If the data type is 

* #PREF_DOUBLE, you need call [[Double|#longBitsToDouble(long)]] method to convert the first element of array to double value 
 

* **preferences** available data types you wish to get 
 

* **checkOverflow** need check overflow when parsing data
 

//Returns://position of the first char in the source after successful parsing of the current integer 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected
 

//Since:// 0.0.1 last update 0.0.3 
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="result" type="long[]"/><parameter name="preferences" type="int"/><parameter name="checkOverflow" type="boolean"/></method><method modifiers="public static" name="symbolNeedsEscaping" since="@inherited" type="boolean"><overview xmlns=""> Test weather the given char need escaping in the external representation


 

* **symbol** symbol to test
 

* **strongEscaping** true means mandatory escaping for all chars greater than 0xFF. False requires more smart analysis. 
 

//Returns://true if the char need escaping
</overview><parameter name="symbol" type="char"/><parameter name="strongEscaping" type="boolean"/></method><method modifiers="public static" name="parseEscapedChar" since="0.0.2" type="int"><overview xmlns=""> Parse possibly escaped char.


 

* **source** source data contains character representation of the char
 

* **from** starting position in the source data. 
 

* **result** array (new char[1]) to store parsed char
 

//Returns://position of the first char in the source after successful parsing of the current char.
 

//Since:// 0.0.2 
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="result" type="char[]"/></method><method modifiers="public static" name="parseUnescapedString" since="@inherited" type="int"><overview xmlns=""> Parse unescaped string. This method defines location of the string was bound with the paired quotas (for example "before 'my string' after").
 This method **not** supports any escape sequences inside the string. To process it, use 

* #parseString(char[], int, char, StringBuilder) method


 

* **source** source data contains character representation of the string value
 

* **from** starting position in the source data. Starting position need points not to quota mark, but the first character in the string (see JUnit tests) 
 

* **terminal** quota mark to use for the string binding (usually (") or (')) 
 

* **checkEscaping** test presence of any escaping. If true, negative returned value from the method marks about it  
 

* **result** array (new int[2]) to store start and end position of the detected string
 

//Returns://position of the first char in the source after successful parsing of the current string. Will be negative if checkEscaping=true and any escape sequence 
 in the string will be detected. It can be used for optimization purposes to avoid rare escaping processing  
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="terminal" type="char"/><parameter name="checkEscaping" type="boolean"/><parameter name="result" type="int[]"/></method><method modifiers="public static" name="parseString" since="@inherited" type="int"><overview xmlns=""> Parse escaped string. DIffer to 

* #parseUnescapedString(char[], int, char, boolean, int[]) correctly process the escape sequences. 
 Available escape sequences are oriented to the sequences used in the JSON string (see JSON description RFC)

 
 

* **source** source data contains character representation of the string value
 

* **from** starting position in the source data. Starting position need points not to quota mark, but the first character in the string (see JUnit tests) 
 

* **terminal** quota mark to use for the string binding (usually (") or (')) 
 

* **result** string builder to store parsed string
 

//Returns://position of the first char in the source after successful parsing of the current string 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="terminal" type="char"/><parameter name="result" type="java.lang.StringBuilder"/></method><method modifiers="public static" name="parseStringExtended" since="@inherited" type="int"><overview xmlns=""> Parse escaped string. DIffer to 

* #parseString(char[], int, char, StringBuilder) also correctly process advanced escape sequences (\0NNN and \0xNNN).

 
 

* **source** source data contains character representation of the string value
 

* **from** starting position in the source data. Starting position need points not to quota mark, but the first character in the string (see JUnit tests) 
 

* **terminal** quota mark to use for the string binding (usually (") or (')) 
 

* **result** string builder to store parsed string
 

//Returns://position of the first char in the source after successful parsing of the current string 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="terminal" type="char"/><parameter name="result" type="java.lang.StringBuilder"/></method><method modifiers="public static" name="parseEnum" since="@inherited" type="int"><overview xmlns=""> Parse enumeration constants from the source


 

* &lt;T&gt; enumeration type
 

* **source** source data contains character representation of the string value
 

* **from** starting position in the source data. 
 

* **clazz** enumeration class awaited for the constant
 

* **result** array (new Enum[1]) to store parsed enumeration constant
 

//Returns://position of the first char in the source after successful parsing of the enumeration constant 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="clazz" type="java.lang.Class&lt;T&gt;"/><parameter name="result" type="T[]"/></method><method modifiers="public static" name="parseName" since="@inherited" type="int"><overview xmlns=""> Parse name from the source


 

* **source** source data contains character representation of the name
 

* **from** starting position in the source data. 
 

* **result** array (new int[2]) to store start and end position of the name detected
 

//Returns://position of the first char in the source after successful parsing of the name 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="result" type="int[]"/></method><method modifiers="public static final" name="skipBlank" since="0.0.3" type="int"><overview xmlns=""> Skip blank content of the line


 

* **source** content to skip in
 

* **from** start position to skip
 

* **stopOnEOL** don't pass cross lines
 

//Returns://nearest non-blank position in the source
 

* [[NullPointerException|NullPointerException]] :  if source string is null
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if from position out of range 
 

//Since:// 0.0.3 
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="stopOnEOL" type="boolean"/></method><method modifiers="public static" name="compare" since="@inherited" type="boolean"><overview xmlns=""> Compare char array slice with the given template


 

* **source** source data contains data to compare
 

* **from** starting position of the slice to compare 
 

* **template** template to compare
 

//Returns://true if the source slice is equals to template
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="template" type="char[]"/></method><method modifiers="public static" name="compare" since="@inherited" type="boolean"><overview xmlns=""> Compare char array slice with the given part of template


 

* **source** source data contains data to compare
 

* **from** starting position of the slice to compare 
 

* **template** template to compare
 

* **templateFrom** starting position on the template to compare
 

* **templateLen** legth of template piece to compare with
 

//Returns://true if the source slice is equals to template part
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any parsing errors ware detected 
</overview><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="template" type="char[]"/><parameter name="templateFrom" type="int"/><parameter name="templateLen" type="int"/></method><method modifiers="public static" name="like" since="0.0.3" type="int"><overview xmlns=""> Performs 'like' operation in char arrays (see SQL language syntax)


 

* **source** source array to test
 

* **template** template to test. Wild cards of the template are (*) - any sequence, (?) - exactly one char
 

* **from** start testing like in the source
 

//Returns://length 'liked' if resolved, or any negative value if doesn't like
 

* [[NullPointerException|NullPointerException]] :  if source or template are null
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if from position out of range
 

//Since:// 0.0.3
</overview><parameter name="source" type="char[]"/><parameter name="template" type="char[]"/><parameter name="from" type="int"/></method><method modifiers="public static" name="like" since="0.0.3" type="int"><overview xmlns=""> Performs 'like' operation in char arrays (see SQL language syntax)


 

* **source** source array to test
 

* **template** template to test. Wild cards of the template are (*) - any sequence, (?) - exactly one char
 

* **from** start testing like in the source
 

* **to** end testing like in the source
 

//Returns://length 'liked' if resolved, or any negative value if doesn't like
 

* [[NullPointerException|NullPointerException]] : 
 

* [[IllegalArgumentException|IllegalArgumentException]] : 
 

//Since:// 0.0.3
</overview><parameter name="source" type="char[]"/><parameter name="template" type="char[]"/><parameter name="from" type="int"/><parameter name="to" type="int"/></method><method modifiers="public static" name="printLong" since="@inherited" type="int"><overview xmlns=""> Print long number to the char array


 

* **content** char array to fill with long
 

* **from** start position in the char array to fill
 

* **value** long value to fill to content
 

* **reallyFill** weather really fill content. When false, only total filled size will be calculated
 

//Returns://new from position to continue filling content. Negative value marks that content is too short to keep value. It's
 absolute value exactly marks new from position to continue filling 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any argument errors ware detected 
</overview><parameter name="content" type="char[]"/><parameter name="from" type="int"/><parameter name="value" type="long"/><parameter name="reallyFill" type="boolean"/></method><method modifiers="public static" name="printDouble" since="@inherited" type="int"><overview xmlns=""> Print double number to the char array


 

* **content** char array to fill with long
 

* **from** start position in the char array to fill
 

* **value** double value to fill to content
 

* **reallyFill** weather really fill content. When false, only total filled size will be calculated
 

//Returns://new from position to continue filling content. Negative value marks that content is too short to keep value. It's
 absolute value exactly marks new from position to continue filling 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  if any argument errors ware detected 
</overview><parameter name="content" type="char[]"/><parameter name="from" type="int"/><parameter name="value" type="double"/><parameter name="reallyFill" type="boolean"/></method><method modifiers="public static" name="printEscapedChar" since="0.0.2" type="int"><overview xmlns=""> Print char to char array with escaping it if need

 
 

* **content** char array to fill with long
 

* **from** start position in the char array to fill
 

* **value** char value to fill to content
 

* **reallyFill** weather really fill content. When false, only total filled size will be calculated
 

* **strongEscaping** true strongly escapes all chars &amp;gt; 0xFF. False makes smart analyze 
 

//Returns://new from position to continue filling content. Negative value marks that content is too short to keep value.
 

* [[IllegalArgumentException|IllegalArgumentException]] :  on any argument errors
 

//Since:// 0.0.2
</overview><parameter name="content" type="char[]"/><parameter name="from" type="int"/><parameter name="value" type="char"/><parameter name="reallyFill" type="boolean"/><parameter name="strongEscaping" type="boolean"/></method><method modifiers="public static" name="printEscapedString" since="0.0.2" type="int"><overview xmlns=""> Print string to the char array with escaping if need


 

* **content** char array to fill with long
 

* **from** start position in the char array to fill
 

* **value** string value to fill to content
 

* **reallyFill** weather really fill content. When false, only total filled size will be calculated
 

* **strongEscaping** true strongly escapes all chars &amp;gt; 0xFF. False makes smart analyze 
 

//Returns://new from position to continue filling content. Negative value marks that content is too short to keep value.
 

* [[IllegalArgumentException|IllegalArgumentException]] :  on any argument errors
 

//Since:// 0.0.2
</overview><parameter name="content" type="char[]"/><parameter name="from" type="int"/><parameter name="value" type="java.lang.String"/><parameter name="reallyFill" type="boolean"/><parameter name="strongEscaping" type="boolean"/></method><method modifiers="public static" name="printEscapedCharArray" since="0.0.2" type="int"><overview xmlns=""> Print string to the char array with escaping if need


 

* **content** char array to fill with long
 

* **from** start position in the char array to fill
 

* **value** char array value to fill to content
 

* **reallyFill** weather really fill content. When false, only total filled size will be calculated
 

* **strongEscaping** true strongly escapes all chars &amp;gt; 0xFF. False makes smart analyze 
 

//Returns://new from position to continue filling content. Negative value marks that content is too short to keep value.
 

* [[IllegalArgumentException|IllegalArgumentException]] :  on any argument errors
 

//Since:// 0.0.2
</overview><parameter name="content" type="char[]"/><parameter name="from" type="int"/><parameter name="value" type="char[]"/><parameter name="reallyFill" type="boolean"/><parameter name="strongEscaping" type="boolean"/></method><method modifiers="public static" name="printEscapedCharArray" since="0.0.2" type="int"><overview xmlns=""> Print string to the char array with escaping if need. String terminators will not be printed, so you must print it yourself


 

* **content** char array to fill with long
 

* **from** start position in the char array to fill
 

* **value** char array value to fill to content
 

* **charFrom** start position inside char array to fill from
 

* **charTo** end position inside char array to fill from
 

* **reallyFill** weather really fill content. When false, only total filled size will be calculated
 

* **strongEscaping** true strongly escapes all chars &amp;gt; 0xFF. False makes smart analyze 
 

//Returns://new from position to continue filling content. Negative value marks that content is too short to keep value.
 

* [[IllegalArgumentException|IllegalArgumentException]] :  on any argument errors
 

//Since:// 0.0.2
</overview><parameter name="content" type="char[]"/><parameter name="from" type="int"/><parameter name="value" type="char[]"/><parameter name="charFrom" type="int"/><parameter name="charTo" type="int"/><parameter name="reallyFill" type="boolean"/><parameter name="strongEscaping" type="boolean"/></method><method modifiers="public static" name="substitute" since="0.0.2" type="java.lang.String"><overview xmlns=""> Substitute string content. Seeks the **${&lt;/b&gt;&lt;key_to_substitute&gt;**}** sequence inside string value and substitute it with the
 //key_to_substitute// value. This value will be got by calling [[//CharUtils/SubstitutionSource|#getValue(String)]] method.

 
 

* **key** optional key to identify string value. Will be used in the exceptions if will be thrown
 

* **value** value for substitution. 
 

* **source** interface to get values for keys detected
 

//Returns://value with substituted keys
 

* [[NullPointerException|NullPointerException]] :  when any parameters is null 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  when any problems during substitution were detected 
 

//Since:// 0.0.2
</overview><parameter name="key" type="java.lang.String"/><parameter name="value" type="java.lang.String"/><parameter name="source" type="chav1961.purelib.basic.CharUtils.SubstitutionSource"/></method><method modifiers="public static" name="substitute" since="0.0.2" type="char[]"><overview xmlns=""> Substitute string content. Seeks the **${&lt;/b&gt;&lt;key_to_substitute&gt;**}** sequence inside string value and substitute it with the
 //key_to_substitute// value. This value will be got by calling [[//CharUtils/SubstitutionSource|#getValue(String)]] method.

 
 

* **key** optional key to identify string value. Will be used in the exceptions if will be thrown
 

* **value** char array for substitution. 
 

* **from** start position in the char array to process substitution
 

* **length** length of the content portion to process
 

* **source** interface to get values for keys detected
 

//Returns://value with substituted keys
 

* [[NullPointerException|NullPointerException]] :  when any parameters is null 
 

* [[IllegalArgumentException|IllegalArgumentException]] :  when any problems during substitution were detected 
 

//Since:// 0.0.2
</overview><parameter name="key" type="java.lang.String"/><parameter name="value" type="char[]"/><parameter name="from" type="int"/><parameter name="length" type="int"/><parameter name="source" type="chav1961.purelib.basic.CharUtils.CharSubstitutionSource"/></method><method modifiers="public static" name="split" since="0.0.2" type="java.lang.String[]"><overview xmlns=""> Split string into string arrays. Against [[String|#split(String)]] doesn't use regular expressions

	
 

* **source** string to split
 

* **splitter** splitter char
 

//Returns://string array with splitter string. Always contains at least one element
 

* [[NullPointerException|NullPointerException]] :  when source string is null
 

//Since:// 0.0.2
</overview><parameter name="source" type="java.lang.String"/><parameter name="splitter" type="char"/></method><method modifiers="public static" name="split" since="0.0.2" type="int"><overview xmlns=""> Split string into string arrays. Against [[String|#split(String)]] doesn't use regular expressions


 

* **source** string to split
 

* **splitter** splitter char
 

* **target** target array to receive strings splitted
 

//Returns://non-negative number - number of pieces of the splitted string, negative number - -(number of pieces of the splitted string + 1).
 Negative number means that target array is too small to receive content (nothing will be filled in this case)
 

* [[NullPointerException|NullPointerException]] :  when either source or target parameter is null
 

//Since:// 0.0.2
</overview><parameter name="source" type="java.lang.String"/><parameter name="splitter" type="char"/><parameter name="target" type="java.lang.String[]"/></method><method modifiers="public static" name="split" since="0.0.2" type="java.lang.String[]"><overview xmlns=""> Split string into string arrays. Against [[String|#split(String)]] doesn't use regular expressions

	
 

* **source** string to split
 

* **splitter** splitter char
 

//Returns://string array with splitter string. Always contains at least one element
 

* [[NullPointerException|NullPointerException]] :  when source string is null
 

* [[IllegalArgumentException|IllegalArgumentException]] :  when splitter is null or empty
 

//Since:// 0.0.2
</overview><parameter name="source" type="java.lang.String"/><parameter name="splitter" type="java.lang.String"/></method><method modifiers="public static" name="split" since="0.0.2" type="int"><overview xmlns=""> Split string into string arrays. Against [[String|#split(String)]] doesn't use regular expressions


 

* **source** string to split
 

* **splitter** splitter char
 

* **target** target array to receive strings splitted
 

//Returns://non-negative number - number of pieces of the splitted string, negative number - -(number of pieces of the splitted string + 1).
 Negative number means that target array is too small to receive content (nothing will be filled in this case)
 

* [[NullPointerException|NullPointerException]] :  when either source or target parameter is null
 

* [[IllegalArgumentException|IllegalArgumentException]] :  when splitter is null or empty
 

//Since:// 0.0.2
</overview><parameter name="source" type="java.lang.String"/><parameter name="splitter" type="java.lang.String"/><parameter name="target" type="java.lang.String[]"/></method><method modifiers="public static" name="join" since="@inherited" type="char[]"><overview xmlns=""/><parameter name="delimiter" type="char[]"/><parameter name="content" type="char[][]"/></method><method modifiers="public static" name="join" since="@inherited" type="java.lang.String"><overview xmlns=""/><parameter name="delimiter" type="java.lang.String"/><parameter name="content" type="java.lang.String[]"/></method></class><class inside="CharUtils" kindof="CT_INTERFACE" modifiers="public static interface" name="CharUtils.SubstitutionSource" since="0.0.2" type="chav1961.purelib.basic.CharUtils.SubstitutionSource"><overview xmlns=""> This interface describes lambda-styled callback for [[//CharUtils|#substitute(String, String, SubstitutionSource)]] call

 
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public" name="getValue" since="@inherited" type="java.lang.String"><overview xmlns=""> Get value for the given key


 

* **key** key to get value for
 

//Returns://value got. Can be null
</overview><parameter name="key" type="java.lang.String"/></method></class><class inside="CharUtils" kindof="CT_INTERFACE" modifiers="public static interface" name="CharUtils.CharSubstitutionSource" since="0.0.2" type="chav1961.purelib.basic.CharUtils.CharSubstitutionSource"><overview xmlns=""> This interface describes lambda-styled callback for [[//CharUtils|#substitute(String, String, SubstitutionSource)]] call

 
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public" name="getValue" since="@inherited" type="char[]"><overview xmlns=""> Get value for the given key


 

* **data** data containing key
 

* **from** key name start index inside data 
 

* **to** key name end index inside data
 

//Returns://value got. Can be null
</overview><parameter name="data" type="char[]"/><parameter name="from" type="int"/><parameter name="to" type="int"/></method></class><class extends="java.lang.Object" implements="[java.lang.Cloneable]" kindof="CT_CLASS" modifiers="public" name="BitCharSet" since="0.0.1, last change 0.0.2" type="chav1961.purelib.basic.BitCharSet"><overview xmlns=""> This class implements a quick restricted set of characters.


 
 The main aim of this class is to reduce time for typical set operations for the character sets. The class supports only restricted
 char set for the first 0..127 characters in the code table. Use the [[//ExtendedBitCharSet|ExtendedBitCharSet]] class to operate with the whole range 
 of available characters in the set. The class not supports a set-specific operations (union, intersect, minus)


 
 To reduce time for operations, the class doesn't check parameters of it's methods, but catches available exceptions during call processing.
 To avoid strong reducing of the performance, never use this class to work with the symbols out of 0..127 range! Use [[//ExtendedBitCharSet|ExtendedBitCharSet]]
 class instead


 
 The most of all methods of the class return the [[//BitCharSet|BitCharSet]] type. It's exactly **this** reference, so you can use them in the
 chained operations (for example new BitCharSet().add('a','b','c').addRange('0','9') etc)


 
 

//See also://  [[//ExtendedBitCharSet|ExtendedBitCharSet]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.1, last change 0.0.2
</overview><field modifiers="protected" name="data" since="@inherited" type="long[]"><overview xmlns=""/></field><method modifiers="public static" name="buildCharSet" since="0.0.2" type="chav1961.purelib.basic.BitCharSet"><overview xmlns=""> Build charset via criteria


 

* **callback** callback to implements charset criteria
 

//Returns://charset built
 

* [[NullPointerException|NullPointerException]] :  when callback is null
 

//Since:// 0.0.2
</overview><parameter name="callback" type="chav1961.purelib.basic.BitCharSet.BuildCharSetCallback"/></method><method modifiers="public" name="add" since="@inherited" type="chav1961.purelib.basic.BitCharSet"><overview xmlns=""> Add symbol to the character set

 
 

* **symbol** symbol to add
 

//Returns://self
</overview><parameter name="symbol" type="char"/></method><method modifiers="public" name="add" since="@inherited" type="chav1961.purelib.basic.BitCharSet"><overview xmlns=""> Add list of characters to the character set


 

* **chars** characters to add
 

//Returns://self
</overview><parameter name="chars" type="char[]"/></method><method modifiers="public" name="addRange" since="@inherited" type="chav1961.purelib.basic.BitCharSet"><overview xmlns=""> Add all character for the given range to the character set


 

* **from** start character range to add
 

* **to** end character range to add
 

//Returns://self
</overview><parameter name="from" type="char"/><parameter name="to" type="char"/></method><method modifiers="public" name="remove" since="@inherited" type="chav1961.purelib.basic.BitCharSet"><overview xmlns=""> Remove character from the character set


 

* **symbol** character to remove
 

//Returns://self
</overview><parameter name="symbol" type="char"/></method><method modifiers="public" name="remove" since="@inherited" type="chav1961.purelib.basic.BitCharSet"><overview xmlns=""> Remove list of characters from the character set


 

* **chars** characters to remove
 

//Returns://self
</overview><parameter name="chars" type="char[]"/></method><method modifiers="public" name="removeRange" since="@inherited" type="chav1961.purelib.basic.BitCharSet"><overview xmlns=""> Remove all character for the given range from the character set


 

* **from** start character range to remove
 

* **to** end character range to remove
 

//Returns://self
</overview><parameter name="from" type="char"/><parameter name="to" type="char"/></method><method modifiers="public" name="contains" since="@inherited" type="boolean"><overview xmlns=""> Test the set contains the given character. Character can be out of range 0..127, but such call strongly reduces class performance!


 

* **symbol** character to test
 

//Returns://true if contains
</overview><parameter name="symbol" type="char"/></method><method modifiers="public" name="union" since="0.0.2" type="chav1961.purelib.basic.BitCharSet"><overview xmlns=""> Build union of two BitCharSets. This charset will be modified

 
 

* **another** another charset to union with
 

//Returns://self
 

* [[NullPointerException|NullPointerException]] :  if another charset is null
 

//Since:// 0.0.2
</overview><parameter name="another" type="chav1961.purelib.basic.BitCharSet"/></method><method modifiers="public" name="intersect" since="0.0.2" type="chav1961.purelib.basic.BitCharSet"><overview xmlns=""> Build intersection of two BitCharSets. This charset will be modified


 

* **another** another charset to intersect with
 

//Returns://self
 

* [[NullPointerException|NullPointerException]] :  if another charset is null
 

//Since:// 0.0.2
</overview><parameter name="another" type="chav1961.purelib.basic.BitCharSet"/></method><method modifiers="public" name="minus" since="0.0.2" type="chav1961.purelib.basic.BitCharSet"><overview xmlns=""> Build subtraction of two BitCharSets. This charset will be modified


 

* **another** another charset to minus
 

//Returns://self
 

* [[NullPointerException|NullPointerException]] :  if another charset is null
 

//Since:// 0.0.2
</overview><parameter name="another" type="chav1961.purelib.basic.BitCharSet"/></method><method modifiers="public" name="invert" since="0.0.2" type="chav1961.purelib.basic.BitCharSet"><overview xmlns=""> Invert charset content. This charset will be modified


 

//Returns://self
 

//Since:// 0.0.2
</overview></method><method modifiers="public" name="size" since="@inherited" type="int"><overview xmlns=""> Calculate cardinality (aka size) of the set


 

//Returns://set cardinality
</overview></method><method modifiers="public" name="toArray" since="@inherited" type="char[]"><overview xmlns=""> Convert the set content to the character array


 

//Returns://ordered character array containing set content. Can be empty but not null
</overview></method><method modifiers="public" name="toArrayPairs" since="0.0.2" type="char[][]"><overview xmlns=""> Convert the set content to the character array pairs. Every element of the array pairs is either single char array for the individual character, or two character array for the contiguous character range


 

//Returns://ordered character array pairs containing set content. Can be empty but not null
 

//Since:// 0.0.2
</overview></method><method modifiers="public" name="clone" since="@inherited" type="chav1961.purelib.basic.BitCharSet"><overview xmlns=""/></method><method modifiers="public" name="toString" since="@inherited" type="java.lang.String"><overview xmlns=""/></method></class><class inside="BitCharSet" kindof="CT_INTERFACE" modifiers="public static interface" name="BitCharSet.BuildCharSetCallback" since="0.0.2" type="chav1961.purelib.basic.BitCharSet.BuildCharSetCallback"><overview xmlns=""> This interface describes callback for building charset by criteria


 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public" name="contains" since="@inherited" type="boolean"><overview xmlns=""> Does the charset contains this character 
 

* **symbol** character to check
 

//Returns://true if contains
</overview><parameter name="symbol" type="char"/></method></class><class extends="chav1961.purelib.basic.AbstractScriptEngineFactory" kindof="CT_CLASS" modifiers="public" name="AsmScriptEngineFactory" since="0.0.2" type="chav1961.purelib.basic.AsmScriptEngineFactory"><overview xmlns=""> This class implements [[ScriptEngineFactory|ScriptEngineFactory]] functionality for the Java Byte code Macro Assembler (see [[AsmWriter|AsmWriter]]).
 This class is an SPI service and can be accessed via the [[ScriptEngineManager|ScriptEngineManager]] functionality. Language name for the [[ScriptEngineManager|ScriptEngineManager]]
 is **"javaasm"** or **"jasm"**. To execute compiled assembler immediately, it need contains a **public static** Object main([[Bindings|Bindings]],String[])
 method in it. String[] parameters are exactly [[BasicScriptEngineController|#execute(String...)]] parameters. Using this class thru 
 [[ScriptEngine|#eval(String)]] method, this String[] parameters are exactly **new** String[0].

 
 
 

//See also://  [[ScriptEngineManager|ScriptEngineManager]]
 

//See also://  [[ScriptEngineFactory|ScriptEngineFactory]]
 

//See also://  [[ScriptEngine|ScriptEngine]]
 

//See also://  [[BasicScriptEngineController|BasicScriptEngineController]]
 

//See also://  [[AsmWriter|AsmWriter]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><field modifiers="public static final" name="ENGINE_FULL_NAME" since="@inherited" type="java.lang.String"><overview xmlns=""/></field><field modifiers="public static final" name="ENGINE_VERSION" since="@inherited" type="java.lang.String"><overview xmlns=""/></field><field modifiers="public static final" name="LANG_NAME" since="@inherited" type="java.lang.String"><overview xmlns=""/></field><field modifiers="public static final" name="LANG_VERSION" since="@inherited" type="java.lang.String"><overview xmlns=""/></field><method modifiers="public" name="getMethodCallSyntax" since="@inherited" type="java.lang.String"><overview xmlns=""/><parameter name="obj" type="java.lang.String"/><parameter name="m" type="java.lang.String"/><parameter name="args" type="java.lang.String[]"/></method><method modifiers="public" name="getOutputStatement" since="@inherited" type="java.lang.String"><overview xmlns=""/><parameter name="toDisplay" type="java.lang.String"/></method><method modifiers="public" name="getProgram" since="@inherited" type="java.lang.String"><overview xmlns=""/><parameter name="statements" type="java.lang.String[]"/></method><method modifiers="public" name="getScriptEngine" since="@inherited" type="javax.script.ScriptEngine"><overview xmlns=""/></method></class><class extends="java.lang.Object" kindof="CT_CLASS" modifiers="public" name="ArgParser" since="0.0.3" type="chav1961.purelib.basic.ArgParser"><overview xmlns=""> This class is used to parse and access command line arguments for console-based applications. Recommended template to use it is produce
 child class for it:


 {{{code}}}
 . . .
 class ChildArgParser extends ArgParser {&lt;br&gt;
 public ChildArgParser(){&lt;br&gt;
 super(new ZZZarg(...),...);
 }
 }
 . . .
 static ChildArgParser parser = new ChildArgParser();
 . . . 
 public static void main(String[] args) {&lt;br&gt;
 ChildArgParser currentList = parser.parse(args);
 . . .
 int value = currentList.getValue("intName",int.class);
 . . .
 }
 
 This class can be used in multithreaded environment


 
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.3
</overview><method modifiers="public" name="parse" since="@inherited" type="chav1961.purelib.basic.ArgParser"><overview xmlns=""/><parameter name="args" type="java.lang.String[]"/></method><method modifiers="public" name="getValue" since="@inherited" type="T"><overview xmlns=""/><parameter name="key" type="java.lang.String"/><parameter name="awaited" type="java.lang.Class&lt;T&gt;"/></method><method modifiers="public" name="isTyped" since="@inherited" type="boolean"><overview xmlns=""/><parameter name="key" type="java.lang.String"/></method><method modifiers="public" name="getUsage" since="@inherited" type="java.lang.String"><overview xmlns=""/><parameter name="applicationName" type="java.lang.String"/></method></class><class inside="ArgParser" kindof="CT_INTERFACE" modifiers="protected static interface" name="ArgParser.ArgDescription" since="@inherited" type="chav1961.purelib.basic.ArgParser.ArgDescription"><overview xmlns=""/><method modifiers="public" name="getName" since="@inherited" type="java.lang.String"><overview xmlns=""/></method><method modifiers="public" name="getHelpDescriptor" since="@inherited" type="java.lang.String"><overview xmlns=""/></method><method modifiers="public" name="getValue" since="@inherited" type="T"><overview xmlns=""/><parameter name="value" type="java.lang.String"/><parameter name="awaited" type="java.lang.Class&lt;T&gt;"/></method><method modifiers="public" name="getDefaultValue" since="@inherited" type="java.lang.String[]"><overview xmlns=""/></method><method modifiers="public" name="isMandatory" since="@inherited" type="boolean"><overview xmlns=""/></method><method modifiers="public" name="isPositional" since="@inherited" type="boolean"><overview xmlns=""/></method><method modifiers="public" name="isList" since="@inherited" type="boolean"><overview xmlns=""/></method><method modifiers="public" name="hasValue" since="@inherited" type="boolean"><overview xmlns=""/></method><method modifiers="public" name="validate" since="@inherited" type="void"><overview xmlns=""/><parameter name="value" type="java.lang.String"/></method></class><class extends="java.lang.Object" implements="[chav1961.purelib.basic.ArgParser.ArgDescription]" inside="ArgParser" kindof="CT_CLASS" modifiers="protected abstract static" name="ArgParser.AbstractArg" since="@inherited" type="chav1961.purelib.basic.ArgParser.AbstractArg"><overview xmlns=""/><method modifiers="public abstract" name="getValue" since="@inherited" type="T"><overview xmlns=""/><parameter name="value" type="java.lang.String"/><parameter name="awaited" type="java.lang.Class&lt;T&gt;"/></method><method modifiers="public abstract" name="getDefaultValue" since="@inherited" type="java.lang.String[]"><overview xmlns=""/></method><method modifiers="public abstract" name="isList" since="@inherited" type="boolean"><overview xmlns=""/></method><method modifiers="public abstract" name="validate" since="@inherited" type="void"><overview xmlns=""/><parameter name="value" type="java.lang.String"/></method><method modifiers="public" name="getName" since="@inherited" type="java.lang.String"><overview xmlns=""/></method><method modifiers="public" name="getHelpDescriptor" since="@inherited" type="java.lang.String"><overview xmlns=""/></method><method modifiers="public" name="isMandatory" since="@inherited" type="boolean"><overview xmlns=""/></method><method modifiers="public" name="isPositional" since="@inherited" type="boolean"><overview xmlns=""/></method><method modifiers="public" name="hasValue" since="@inherited" type="boolean"><overview xmlns=""/></method><method modifiers="public" name="toString" since="@inherited" type="java.lang.String"><overview xmlns=""/></method></class><class extends="chav1961.purelib.basic.ArgParser.AbstractArg" inside="ArgParser" kindof="CT_CLASS" modifiers="protected static" name="ArgParser.BooleanArg" since="@inherited" type="chav1961.purelib.basic.ArgParser.BooleanArg"><overview xmlns=""/><method modifiers="public" name="getValue" since="@inherited" type="T"><overview xmlns=""/><parameter name="value" type="java.lang.String"/><parameter name="awaited" type="java.lang.Class&lt;T&gt;"/></method><method modifiers="public" name="getDefaultValue" since="@inherited" type="java.lang.String[]"><overview xmlns=""/></method><method modifiers="public" name="isList" since="@inherited" type="boolean"><overview xmlns=""/></method><method modifiers="public" name="validate" since="@inherited" type="void"><overview xmlns=""/><parameter name="value" type="java.lang.String"/></method><method modifiers="public" name="hasValue" since="@inherited" type="boolean"><overview xmlns=""/></method><method modifiers="public" name="toString" since="@inherited" type="java.lang.String"><overview xmlns=""/></method></class><class extends="chav1961.purelib.basic.ArgParser.AbstractArg" inside="ArgParser" kindof="CT_CLASS" modifiers="protected static" name="ArgParser.IntegerArg" since="@inherited" type="chav1961.purelib.basic.ArgParser.IntegerArg"><overview xmlns=""/><method modifiers="public" name="getValue" since="@inherited" type="T"><overview xmlns=""/><parameter name="value" type="java.lang.String"/><parameter name="awaited" type="java.lang.Class&lt;T&gt;"/></method><method modifiers="public" name="getDefaultValue" since="@inherited" type="java.lang.String[]"><overview xmlns=""/></method><method modifiers="public" name="isList" since="@inherited" type="boolean"><overview xmlns=""/></method><method modifiers="public" name="validate" since="@inherited" type="void"><overview xmlns=""/><parameter name="value" type="java.lang.String"/></method><method modifiers="public" name="toString" since="@inherited" type="java.lang.String"><overview xmlns=""/></method></class><class extends="chav1961.purelib.basic.ArgParser.AbstractArg" inside="ArgParser" kindof="CT_CLASS" modifiers="protected static" name="ArgParser.RealArg" since="@inherited" type="chav1961.purelib.basic.ArgParser.RealArg"><overview xmlns=""/><method modifiers="public" name="getValue" since="@inherited" type="T"><overview xmlns=""/><parameter name="value" type="java.lang.String"/><parameter name="awaited" type="java.lang.Class&lt;T&gt;"/></method><method modifiers="public" name="getDefaultValue" since="@inherited" type="java.lang.String[]"><overview xmlns=""/></method><method modifiers="public" name="isList" since="@inherited" type="boolean"><overview xmlns=""/></method><method modifiers="public" name="validate" since="@inherited" type="void"><overview xmlns=""/><parameter name="value" type="java.lang.String"/></method><method modifiers="public" name="toString" since="@inherited" type="java.lang.String"><overview xmlns=""/></method></class><class extends="chav1961.purelib.basic.ArgParser.AbstractArg" inside="ArgParser" kindof="CT_CLASS" modifiers="protected static" name="ArgParser.StringArg" since="@inherited" type="chav1961.purelib.basic.ArgParser.StringArg"><overview xmlns=""/><method modifiers="public" name="getValue" since="@inherited" type="T"><overview xmlns=""/><parameter name="value" type="java.lang.String"/><parameter name="awaited" type="java.lang.Class&lt;T&gt;"/></method><method modifiers="public" name="getDefaultValue" since="@inherited" type="java.lang.String[]"><overview xmlns=""/></method><method modifiers="public" name="isList" since="@inherited" type="boolean"><overview xmlns=""/></method><method modifiers="public" name="validate" since="@inherited" type="void"><overview xmlns=""/><parameter name="value" type="java.lang.String"/></method><method modifiers="public" name="toString" since="@inherited" type="java.lang.String"><overview xmlns=""/></method></class><class extends="chav1961.purelib.basic.ArgParser.AbstractArg" inside="ArgParser" kindof="CT_CLASS" modifiers="protected static" name="ArgParser.URIArg" since="@inherited" type="chav1961.purelib.basic.ArgParser.URIArg"><overview xmlns=""/><method modifiers="public" name="getValue" since="@inherited" type="T"><overview xmlns=""/><parameter name="value" type="java.lang.String"/><parameter name="awaited" type="java.lang.Class&lt;T&gt;"/></method><method modifiers="public" name="getDefaultValue" since="@inherited" type="java.lang.String[]"><overview xmlns=""/></method><method modifiers="public" name="isList" since="@inherited" type="boolean"><overview xmlns=""/></method><method modifiers="public" name="validate" since="@inherited" type="void"><overview xmlns=""/><parameter name="value" type="java.lang.String"/></method><method modifiers="public" name="toString" since="@inherited" type="java.lang.String"><overview xmlns=""/></method></class><class extends="chav1961.purelib.basic.ArgParser.AbstractArg" inside="ArgParser" kindof="CT_CLASS" modifiers="protected static" name="ArgParser.EnumArg" since="@inherited" type="chav1961.purelib.basic.ArgParser.EnumArg"><overview xmlns=""/><method modifiers="public" name="getValue" since="@inherited" type="T"><overview xmlns=""/><parameter name="value" type="java.lang.String"/><parameter name="awaited" type="java.lang.Class&lt;T&gt;"/></method><method modifiers="public" name="getDefaultValue" since="@inherited" type="java.lang.String[]"><overview xmlns=""/></method><method modifiers="public" name="isList" since="@inherited" type="boolean"><overview xmlns=""/></method><method modifiers="public" name="validate" since="@inherited" type="void"><overview xmlns=""/><parameter name="value" type="java.lang.String"/></method><method modifiers="public" name="toString" since="@inherited" type="java.lang.String"><overview xmlns=""/></method></class><class extends="java.lang.Object" implements="[chav1961.purelib.basic.interfaces.SyntaxTreeInterface&lt;T&gt;]" kindof="CT_CLASS" modifiers="public" name="AndOrTree" since="0.0.1, last update 0.0.2" type="chav1961.purelib.basic.AndOrTree"><overview xmlns=""> This class is a sort of fast prefix tree. It class implements [[SyntaxTreeInterface|SyntaxTreeInterface]] interface by the And/Or tree algorithm. And/Or tree is a specific implementation of the well-known 
 **href="https://en.wikipedia.org/wiki/Trie"&gt;compressed trie** (main difference is that keys are associated with the tree //nodes//, not //edges//),
 and it is optimized to work with character arrays only. Any string parameters in the methods to call used will reduce it's performance and memory, so avoid to use
 them too often. The preferred use case of the tree is parsing character input content.


   
 All the tree consists of of a nodes of three kind:


 
 
* OR node 
 
* AND node 
 
* TERM node 
 
  
 OR node contains an ordered array of characters and a parallel array with the references to appropriative child nodes. AND node contains a 'substring' of data stored in the tree.
 As seeking, so placing new data to the tree operates with the char arrays, not [[String|String]]. The seeking moves char-by-char on the source character array and also traverses from the
 tree root to depth according to current character in the source array. When the actual tree node is OR-node, program finds (or //not// finds) current character from the source in 
 the OR-node char array and traverses to the child was found. When the actual tree node is AND-node, program compares a slice of source array with the 'substring' in the AND-node.
 This algorithm guarantees, that no one extra comparison will be made during data seeking.


 And/Or tree is more quick than usual trees and can work directly with the source char arrays instead of converting them to strings.


 
 **Performance notes:**


 
 
* environment: Intel Celeron 1.5GHz 2-core, 64, Windows 8. Windows performance index=3.2. Java SE 1.8-32. JVM settings -Xmx4096m -Xms4096m -d64

 
* testing set: 1 million 64-char scratched strings (see test).

 
 Performance result:


 
 
* placement of non-existent string ~2.8 microseconds/item
 
 
* placement of existent string ~1.2 microseconds/item
 
 
* seeking of existent string ~0.9 microseconds/item
 
 
 
 

* &lt;T&gt; any king of data associated with the tree elements
 
 

//See also://  [[&lt;a|&lt;a]] [[href="https://en.wikipedia.org/wiki/Trie"&gt;Trie&lt;/a&gt;|href="https://en.wikipedia.org/wiki/Trie"&gt;Trie&lt;/a&gt;]]
 

//See also://  [[SyntaxTreeInterface|SyntaxTreeInterface]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.1, last update 0.0.2
</overview><method modifiers="public" name="placeName" since="@inherited" type="long"><overview xmlns=""/><parameter name="name" type="java.lang.String"/><parameter name="cargo" type="T"/></method><method modifiers="public" name="placeOrChangeName" since="@inherited" type="long"><overview xmlns=""/><parameter name="name" type="java.lang.String"/><parameter name="cargo" type="T"/></method><method modifiers="public" name="placeName" since="@inherited" type="long"><overview xmlns=""/><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="to" type="int"/><parameter name="cargo" type="T"/></method><method modifiers="public" name="placeOrChangeName" since="@inherited" type="long"><overview xmlns=""/><parameter name="value" type="char[]"/><parameter name="from" type="int"/><parameter name="to" type="int"/><parameter name="cargo" type="T"/></method><method modifiers="public" name="placeName" since="@inherited" type="long"><overview xmlns=""/><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="to" type="int"/><parameter name="id" type="long"/><parameter name="cargo" type="T"/></method><method modifiers="public" name="placeOrChangeName" since="@inherited" type="long"><overview xmlns=""/><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="to" type="int"/><parameter name="id" type="long"/><parameter name="cargo" type="T"/></method><method modifiers="public" name="placeName" since="@inherited" type="long"><overview xmlns=""/><parameter name="name" type="java.lang.String"/><parameter name="id" type="long"/><parameter name="cargo" type="T"/></method><method modifiers="public" name="placeOrChangeName" since="@inherited" type="long"><overview xmlns=""/><parameter name="name" type="java.lang.String"/><parameter name="id" type="long"/><parameter name="cargo" type="T"/></method><method modifiers="public" name="seekName" since="@inherited" type="long"><overview xmlns=""/><parameter name="name" type="java.lang.String"/></method><method modifiers="public" name="seekName" since="@inherited" type="long"><overview xmlns=""/><parameter name="source" type="char[]"/><parameter name="from" type="int"/><parameter name="to" type="int"/></method><method modifiers="public" name="contains" since="@inherited" type="boolean"><overview xmlns=""/><parameter name="id" type="long"/></method><method modifiers="public" name="getNameLength" since="@inherited" type="int"><overview xmlns=""/><parameter name="id" type="long"/></method><method modifiers="public" name="getName" since="@inherited" type="java.lang.String"><overview xmlns=""/><parameter name="id" type="long"/></method><method modifiers="public" name="getName" since="@inherited" type="int"><overview xmlns=""/><parameter name="id" type="long"/><parameter name="where" type="char[]"/><parameter name="from" type="int"/></method><method modifiers="public" name="getCargo" since="@inherited" type="T"><overview xmlns=""/><parameter name="id" type="long"/></method><method modifiers="public" name="setCargo" since="@inherited" type="void"><overview xmlns=""/><parameter name="id" type="long"/><parameter name="cargo" type="java.lang.Object"/></method><method modifiers="public" name="removeName" since="@inherited" type="boolean"><overview xmlns=""/><parameter name="id" type="long"/></method><method modifiers="public" name="compareNames" since="@inherited" type="int"><overview xmlns=""/><parameter name="id1" type="long"/><parameter name="id2" type="long"/></method><method modifiers="public" name="walk" since="@inherited" type="void"><overview xmlns=""/><parameter name="callback" type="chav1961.purelib.basic.interfaces.SyntaxTreeInterface.Walker&lt;T&gt;"/></method><method modifiers="public" name="size" since="@inherited" type="long"><overview xmlns=""/></method><method modifiers="public" name="clear" since="@inherited" type="void"><overview xmlns=""/></method></class><class extends="java.lang.Object" implements="[javax.script.ScriptEngineFactory]" kindof="CT_CLASS" modifiers="public abstract" name="AbstractScriptEngineFactory" since="0.0.2" type="chav1961.purelib.basic.AbstractScriptEngineFactory"><overview xmlns=""> This class implements basic functionality for the [[ScriptEngineFactory|ScriptEngineFactory]] interface. It's functionality is oriented to use with the
 [[//AbstractScriptEngine|AbstractScriptEngine]] class in this package. The good examples of the child implementation for the given class is 
 [[//AsmScriptEngineFactory|AsmScriptEngineFactory]] class in this package. All children, that extends this class, must register them as an SPI service. File
 to register is **META-INF/services/javax.script.ScriptEngineFactory**


 This class is not thread-safe.


 
 

//See also://  [[ScriptEngineFactory|ScriptEngineFactory]]
 

//See also://  [[//AsmScriptEngineFactory|AsmScriptEngineFactory]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><method modifiers="public abstract" name="getMethodCallSyntax" since="@inherited" type="java.lang.String"><overview xmlns=""/><parameter name="obj" type="java.lang.String"/><parameter name="m" type="java.lang.String"/><parameter name="args" type="java.lang.String[]"/></method><method modifiers="public abstract" name="getOutputStatement" since="@inherited" type="java.lang.String"><overview xmlns=""/><parameter name="toDisplay" type="java.lang.String"/></method><method modifiers="public abstract" name="getProgram" since="@inherited" type="java.lang.String"><overview xmlns=""/><parameter name="statements" type="java.lang.String[]"/></method><method modifiers="public abstract" name="getScriptEngine" since="@inherited" type="javax.script.ScriptEngine"><overview xmlns=""/></method><method modifiers="public" name="getEngineName" since="@inherited" type="java.lang.String"><overview xmlns=""/></method><method modifiers="public" name="getEngineVersion" since="@inherited" type="java.lang.String"><overview xmlns=""/></method><method modifiers="public" name="getExtensions" since="@inherited" type="java.util.List&lt;java.lang.String&gt;"><overview xmlns=""/></method><method modifiers="public" name="getMimeTypes" since="@inherited" type="java.util.List&lt;java.lang.String&gt;"><overview xmlns=""/></method><method modifiers="public" name="getNames" since="@inherited" type="java.util.List&lt;java.lang.String&gt;"><overview xmlns=""/></method><method modifiers="public" name="getLanguageName" since="@inherited" type="java.lang.String"><overview xmlns=""/></method><method modifiers="public" name="getLanguageVersion" since="@inherited" type="java.lang.String"><overview xmlns=""/></method><method modifiers="public" name="getParameter" since="@inherited" type="java.lang.Object"><overview xmlns=""/><parameter name="key" type="java.lang.String"/></method></class><class extends="java.lang.Object" implements="[javax.script.ScriptEngine, chav1961.purelib.basic.interfaces.BasicScriptEngineController, java.io.Closeable]" kindof="CT_CLASS" modifiers="public abstract" name="AbstractScriptEngine" since="0.0.2" type="chav1961.purelib.basic.AbstractScriptEngine"><overview xmlns=""> This class implements basic functionality for the [[ScriptEngine|ScriptEngine]] interface. It's functionality is oriented to use with the
 pre-compiled languages, so it has a set of specific protected methods for it:


 
 
* 

* #beforeCompile(Reader, OutputStream) method for preparing compilation process and/or pre-processing input content

 
* 

* #processLineInternal(int, char[], int, int) abstract method for line-by-line compilation input content

 
* 

* #afterCompile(Reader, OutputStream) abstract method for creation compiled output and terminating compilation

 
 This class also contains implementation of [[BasicScriptEngineController|BasicScriptEngineController]] interface, oriented to use with the standard jars content.
 To start application code form the jars, one of the jar classes must contain a **public static** Object main([[Bindings|Bindings]],String[]) method.
 It's location need be typed in the META-INF/manifest.mf file as a standard [[Attributes|.Name#MAIN_CLASS]] key. To implement your own executable 
 code managing, you need to override [[BasicScriptEngineController|#download(InputStream)]] and
 [[BasicScriptEngineController|#download(InputStream)]] methods from [[BasicScriptEngineController|#download(InputStream)]] interface
 and 

* #executeInternal(String[], Bindings) method of this class. The 

* #executeInternal(String[], Bindings) method is a //kernel//
 of the execution mechanism in this implementation, and all others call it to execute code

  
 
 The good examples of the child implementation for the given class is [[AsmScriptEngine|AsmScriptEngine]] class in this package.


 This class is not thread-safe.


 
 

//See also://  [[ScriptEngine|ScriptEngine]]
 

//See also://  [[AsmScriptEngine|AsmScriptEngine]]
 

//See also://  [[BasicScriptEngineController|BasicScriptEngineController]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.2
</overview><field modifiers="protected" name="writer" since="@inherited" type="java.io.Writer"><overview xmlns=""/></field><field modifiers="protected" name="errorWriter" since="@inherited" type="java.io.Writer"><overview xmlns=""/></field><field modifiers="protected" name="reader" since="@inherited" type="java.io.Reader"><overview xmlns=""/></field><method modifiers="protected abstract" name="processLineInternal" since="@inherited" type="void"><overview xmlns=""/><parameter name="displacement" type="long"/><parameter name="lineNo" type="int"/><parameter name="data" type="char[]"/><parameter name="from" type="int"/><parameter name="length" type="int"/></method><method modifiers="protected abstract" name="afterCompile" since="@inherited" type="void"><overview xmlns=""/><parameter name="reader" type="java.io.Reader"/><parameter name="os" type="java.io.OutputStream"/></method><method modifiers="public" name="eval" since="@inherited" type="java.lang.Object"><overview xmlns=""/><parameter name="script" type="java.lang.String"/><parameter name="context" type="javax.script.ScriptContext"/></method><method modifiers="public" name="eval" since="@inherited" type="java.lang.Object"><overview xmlns=""/><parameter name="reader" type="java.io.Reader"/><parameter name="context" type="javax.script.ScriptContext"/></method><method modifiers="public" name="eval" since="@inherited" type="java.lang.Object"><overview xmlns=""/><parameter name="script" type="java.lang.String"/></method><method modifiers="public" name="eval" since="@inherited" type="java.lang.Object"><overview xmlns=""/><parameter name="reader" type="java.io.Reader"/></method><method modifiers="public" name="eval" since="@inherited" type="java.lang.Object"><overview xmlns=""/><parameter name="script" type="java.lang.String"/><parameter name="n" type="javax.script.Bindings"/></method><method modifiers="public" name="eval" since="@inherited" type="java.lang.Object"><overview xmlns=""/><parameter name="reader" type="java.io.Reader"/><parameter name="n" type="javax.script.Bindings"/></method><method modifiers="public" name="put" since="@inherited" type="void"><overview xmlns=""/><parameter name="key" type="java.lang.String"/><parameter name="value" type="java.lang.Object"/></method><method modifiers="public" name="get" since="@inherited" type="java.lang.Object"><overview xmlns=""/><parameter name="key" type="java.lang.String"/></method><method modifiers="public" name="getBindings" since="@inherited" type="javax.script.Bindings"><overview xmlns=""/><parameter name="scope" type="int"/></method><method modifiers="public" name="setBindings" since="@inherited" type="void"><overview xmlns=""/><parameter name="bindings" type="javax.script.Bindings"/><parameter name="scope" type="int"/></method><method modifiers="public" name="createBindings" since="@inherited" type="javax.script.Bindings"><overview xmlns=""/></method><method modifiers="public" name="getContext" since="@inherited" type="javax.script.ScriptContext"><overview xmlns=""/></method><method modifiers="public" name="setContext" since="@inherited" type="void"><overview xmlns=""/><parameter name="context" type="javax.script.ScriptContext"/></method><method modifiers="public" name="getFactory" since="@inherited" type="javax.script.ScriptEngineFactory"><overview xmlns=""/></method><method modifiers="public" name="execute" since="@inherited" type="java.lang.Object"><overview xmlns=""/><parameter name="parameters" type="java.lang.String[]"/></method><method modifiers="public" name="upload" since="@inherited" type="void"><overview xmlns=""/><parameter name="target" type="java.net.URI"/></method><method modifiers="public" name="upload" since="@inherited" type="void"><overview xmlns=""/><parameter name="target" type="java.io.OutputStream"/></method><method modifiers="public" name="download" since="@inherited" type="void"><overview xmlns=""/><parameter name="source" type="java.net.URI"/></method><method modifiers="public" name="download" since="@inherited" type="void"><overview xmlns=""/><parameter name="source" type="java.io.InputStream"/></method><method modifiers="public" name="close" since="@inherited" type="void"><overview xmlns=""/></method><method modifiers="protected" name="getEngineFactory" since="@inherited" type="javax.script.ScriptEngineFactory"><overview xmlns=""/></method><method modifiers="protected" name="beforeCompile" since="@inherited" type="java.io.Reader"><overview xmlns=""/><parameter name="reader" type="java.io.Reader"/><parameter name="os" type="java.io.OutputStream"/></method><method modifiers="protected" name="executeInternal" since="@inherited" type="java.lang.Object"><overview xmlns=""/><parameter name="parameters" type="java.lang.String[]"/><parameter name="bindings" type="javax.script.Bindings"/></method></class><class extends="java.lang.Object" implements="[chav1961.purelib.basic.interfaces.LoggerFacade]" kindof="CT_CLASS" modifiers="public abstract" name="AbstractLoggerFacade" since="0.0.1" type="chav1961.purelib.basic.AbstractLoggerFacade"><overview xmlns=""> This class implements basic functionality for the [[LoggerFacade|LoggerFacade]] interface. To use this class, you need implement two methods:


 
 
* {link 

* #getAbstractLoggerFacade(String, Class) - create logger instance for the new transaction

 
* {link 

* #toLogger(chav1961.purelib.basic.interfaces.LoggerFacade.Severity, String, Throwable) - log message by any way

 
 
 The good examples of the implementation are [[//SystemErrLoggerFacade|SystemErrLoggerFacade]] and [[//DefaultLoggerFacade|DefaultLoggerFacade]] classes in this package.


 This class is not thread-safe.


 
 

//See also://  [[LoggerFacade|LoggerFacade]]
 

//See also://  [[chav1961.purelib.basic|chav1961.purelib.basic]] [[JUnit|JUnit]] [[tests|tests]]
 

//Author:// Alexander Chernomyrdin aka chav1961
 

//Since:// 0.0.1
</overview><method modifiers="protected abstract" name="getAbstractLoggerFacade" since="@inherited" type="chav1961.purelib.basic.AbstractLoggerFacade"><overview xmlns=""/><parameter name="mark" type="java.lang.String"/><parameter name="root" type="java.lang.Class&lt;?&gt;"/></method><method modifiers="protected abstract" name="toLogger" since="@inherited" type="void"><overview xmlns=""/><parameter name="level" type="chav1961.purelib.basic.interfaces.LoggerFacade.Severity"/><parameter name="text" type="java.lang.String"/><parameter name="throwable" type="java.lang.Throwable"/></method><method modifiers="public" name="close" since="@inherited" type="void"><overview xmlns=""/></method><method modifiers="public" name="message" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="level" type="chav1961.purelib.basic.interfaces.LoggerFacade.Severity"/><parameter name="format" type="java.lang.String"/><parameter name="parameters" type="java.lang.Object[]"/></method><method modifiers="public" name="message" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="level" type="chav1961.purelib.basic.interfaces.LoggerFacade.Severity"/><parameter name="callback" type="chav1961.purelib.basic.interfaces.LoggerFacade.LoggerCallbackInterface"/></method><method modifiers="public" name="message" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="level" type="chav1961.purelib.basic.interfaces.LoggerFacade.Severity"/><parameter name="exception" type="java.lang.Throwable"/><parameter name="format" type="java.lang.String"/><parameter name="parameters" type="java.lang.Object[]"/></method><method modifiers="public" name="message" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="level" type="chav1961.purelib.basic.interfaces.LoggerFacade.Severity"/><parameter name="exception" type="java.lang.Throwable"/><parameter name="callback" type="chav1961.purelib.basic.interfaces.LoggerFacade.LoggerCallbackInterface"/></method><method modifiers="public" name="isLoggedNow" since="@inherited" type="boolean"><overview xmlns=""/><parameter name="level" type="chav1961.purelib.basic.interfaces.LoggerFacade.Severity"/></method><method modifiers="public" name="getReducing" since="@inherited" type="java.util.Set&lt;chav1961.purelib.basic.interfaces.LoggerFacade.Reducing&gt;"><overview xmlns=""/></method><method modifiers="public" name="setReducing" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="reducing" type="java.util.Set&lt;chav1961.purelib.basic.interfaces.LoggerFacade.Reducing&gt;"/></method><method modifiers="public" name="setReducing" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="reducing" type="chav1961.purelib.basic.interfaces.LoggerFacade.Reducing[]"/></method><method modifiers="public" name="pushReducing" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="reducing" type="java.util.Set&lt;chav1961.purelib.basic.interfaces.LoggerFacade.Reducing&gt;"/></method><method modifiers="public" name="pushReducing" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="reducing" type="chav1961.purelib.basic.interfaces.LoggerFacade.Reducing[]"/></method><method modifiers="public" name="popReducing" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/></method><method modifiers="public" name="transaction" since="@inherited" type="chav1961.purelib.basic.interfaces.LoggerFacade"><overview xmlns=""/><parameter name="mark" type="java.lang.String"/></method><method modifiers="public" name="rollback" since="@inherited" type="void"><overview xmlns=""/></method></class></package></package></package></navigation>