Работы по Pure Library 0.0.4

Общая работа
*1. Ввести модули в библиотеку
*2. Ввести во все необходимые пакеты подпакет intern и перенести в него классы без контроля входных параметров(для повышения эффективности)

Пакет basic
1. Написать реализацию XmlBasedParser для построения парсеров "болтливых" языков типа SQL.
2. Дописать javadoc 
3. Дополнить класс Utils универсальным методом обхода деревьев и растащить его на остальные классы библиотеки
4. Написать класс XMLUtils и перенести в него полезный код из других классов
*5. Написать и отладить метод extract и tryExtract в классе CharUtils
6. Добавить метод AboutPureLib в класс PureLibSettings
7. Перенести отладочную печать класса из ClassLoaderWRapper и CompilerUtils
*8. Дополнить класс CharUtils методами toCharSequence/toWeakCharSequence для доступа к обернутому символьному массиву (в том числе cо слабой внешней ссылкой)
*9. Перенести методы split и join из CharUtils в UnsafedCharUtils
*10. Написать метод parseStringExtended c GrowableCharArray вместо StringBuilder (несколько иное решение)
*11. Переписать класс LineByLineProcessor на GrowableCharArray вместо StringBuilder
*12. Дополнить класс CharUtils методами escapeStringContent и unescapeStringContent 
*13. Дополнить класс ArgParser параметром типа ConfigFile(с конфигурацией по умолчанию) и реализовать механизм замены параметров из конфигурации на консольные  
14. Написать и отладить класс BPlusTree
15. Дополнить вызовы LogerFacade параметром для явной редукции сообщений (наподобие подавления слишком часто идущих сообщений)
В пакете basic необходимо дополнить функциональность LoggerFacade фильтрами, а также набором свойств транзакционных логгеров. Необходимо также поднять MBean для управления 
этими логгерами (включение фильтров, изменение уровня логирования и других параметров логгера). Транзакционные логгеры необходимо также прокинуть во все трассируемые классы 
(наподобие asm), а также включить для работы с ними режим упаковки данных (с выбросом части данных в TempStore). Обеспечить также перенаправление и дублирование вывода 
логгеров с применением фильтров
Пакет basic.annotations
*1. Дополнить пакет аннотацией @Preliminary
Пакет basic.growablrearrays
*1. Выделить обход дерева в отдельный утилитный класс 
*2. Написать тесты для новых методов GrowableCharArray
Пакет cdb
1. Написать тесты для SyntaxNodeUtils
Пакет concurrent
Пакет exceptions
Пакет fsys
1. Проверить работу FileSystemInMemory
*2. Дополнить тесты проверкой SPI
3. Написать провайдер к файловым системам, чтобы пользоваться стандартным механизмом файловых систем в Java
В пакете fsys необходимо отладить InMemory класс, а также обеспечить возможность создания разделяемого экземпляра файловой системы. Необходимо также проверить 
работоспособность интерфейса с файловой системой "среда выполнения JRE" и исправить собственные ClassLoader-ы для поддержки этих файловых систем
Пакет i18n
1. Дописать javadoc 
*2. Дополнить тесты проверкой SPI
*3. Убрать стандартную реализацию i18n (на базе файлов *.prop) и перейти полностью на XML
*В пакете i18n необходимо переработать организацию справки (с применением Creole Writer), а также избавиться от файлов *.properties, заменив их файлами *.xml. 
В проекте navigator необходимо создать локализатор для поиска, ведения и заполнения проектов сответствующей информацией. Необходимо также переработать способ 
монтирования локализаторов, чтобы исключить сложности с подключением дополнительных компонент (возможно, переделав локализаторы на файловую систему)
Пакет javadoc
1. Довести до ума DocLet
Эту часть необходимо перенести в проект PureLib Navigator 
Пакет json
1. Выполнить рефакторинг JsonSerializer для получения максимальной производительности
2. Дополнить JsonSerializer возможностью работы с Beans (с использованием getter/setter)
3. Дописать javadoc 
4. Реализовать JSON-RPC протокол
Пакет model
1. Написать и отладить класс ContentMetadataFilter
2. Написать и отладить построение ORM-провайдера
3. Дописать и отладить в ModelUtils методы чтения-записи полей по URI
4. Дописать javadoc 
Пакет sql
1. Отладить все ранее написанные классы
2. Написать тесты к SQLUtils
3. Дописать javadoc 
4. Написать реализации интерфейсов Connection и Statement для поддержки препроцессорной обработки строк запросов (через  механизм делегирования) и возможности 
регистрации операций (Callback перед операцией и после операции)
В пакете sql необходимо написать класс, автоматически отображающий содержимое курсора на поля инстанции класса. Он должен поддерживать методы движения,
чтения и записи содержимого полей, а также поддерживать прямую работу с циклом for-each. Класс должен автоматизировать три операции:
- групповую выборку и проход по данным
- групповое изменение (или удаление) в процессе прохода по данным
- групповую вставку данных 
Каждая из операций может выполняться с промежуточными коммитами, если есть такая необходимость. Для операций формирования выходных документов необходимо 
написать дочерний класс, выполняющий обработку смены групп данных.
Пакет sql.content
1. Дописать покрытие тестами на все классы пакета
2. Дописать javadoc 
3. Дополнить тесты проверкой SPI
Пакет sql.juint
1. Реализовать все классы пакета
2. Написать для них тесты
3. Дописать javadoc
Пакет streams
1. Переделать JsonSaxHandlerFactory под новые возможности ассемблера и класса GettersAndSetters 
2. Добавить опцию для BigInteger/BigDecimal
3. Дополнить JsonStaxParser методом nested()->Iterable<LexType> для обработки вложенностей
4. Написать классы CsvStaxParser и CsvStaxPrinter 
5. Дописать javadoc 
Пакет streams.byte2byte
*1. Починить ZLib-потоки
Пакет streams.byte2char
*1. Дописать javadoc 
Пакет streams.char2char
1. Дописать javadoc 
Пакет streams.char2byte.asm
*1. Дополнить ассемблер псевдокомандами .version, .line, .options и .source
*2. Поддержать генерацию кода для версии Java 1.8
3. Поддержать команду invokedynamic
4. Поддержать автоматизацию *load* (поля, индексы, арифметика в полном объеме)
5. Отладить работу .stack
*6. Переделать AsmWriter на реализацию CharPrinterWrapper
*7. Заменить дублированные методы из InternalUtils методами из CompilerUtils
*8. Переделать код LineParser на SyntaxException вместо ContentException 
*9. Выполнить рефакторинг LineParser для исключения дублирующего кода и повышения эффективности работы
*10. Написать и отладить класс StackRepo для дополнительного контроля байт-кода (версия Java 1.8)
В пакете asm необходимо завершить кодогенерацию для Java 1.8, а также переделать макрогенератор, исключив из него по возможности общую символьную строку. 
Желательно прокинуть туда же структуры из пакета cdb. Необходимо также дополнить синтаксис описателем ".const" для обеспечения возможности 
использования констант внутри генерируемого класса, а также описателем ".def" для простой макроподстановки при генерации кода. Этот описатель 
должен быть локален для вложенных блоков и должен удаляться при выходе из них. Необходимо также провести ревизию кода для обеспечения более 
эффективной трансляции. 
*Алгоритм Левенштейна необходимо вытащить в пакет basic.
Пакет streams.char2byte.asm.macro
1. Переделать генерацию класса макроса, занеся символьные строки внутрь класса.
2. Поддержать индексы в параметрах и локальных переменных макросов
3. Поддержать переменное число аргументов в макросах
4. Заменить дублированные методы из InternalUtils методами из CompilerUtils
5. Исключить класс AssemblerTemplateRepo
6. Отладить работу MacroClassLoader (не грузит классы по URL)
Пакет ui
1. Отладить все ранее написанные классы.
2. Дописать javadoc 
В пакете ui необходимо дополнить классы интерпретатором диалоговой экранной формы. В пару к нему по протоколу SPI должны подтягиваться интерпретаторы 
для swing и для WEB. Интерпретатор получает в качестве параметров инстанцию класса с хранимыми данными и модель класса. Далее работает отображение 
инстанции класса через модель на соответствующую среду. Средства отображения должны правильно формировать картинку на соответствующем носителе, 
организовывать передачу и прием данных, их валидацию и обработку навигации (если это необходимо)
Пакет nanoservice
1. Дописать javadoc 
Пакет ui.swing
1. Разработать реализацию всех элементов модели из пакета ui
*2. Написать и отладить класс SwingModelUtils для генерации органов управления по элементам модели
3. Написать метод SwingUtils.showCreoleMicroHelp
4. Дописать javadoc 
*5. Дописать и отладить метод SwingUtils.buildGeneralPath (есть аналог п SVGUtils)
*6. Дописать и отладить метод SwingUtils.parseCSS (перенесен в пакет basic) 
*7. Написать метод locateRelativeToAnchor в класса SwingUtils
8. Написать метод SwingUtils.children для сбора всех возможных дочек от данного органа управления
В пакете ui.swing необходимо завести окно редактора кода с полноценной нумерацией, контекстной подсказкой, цветовыделением, гиперссылками и прочими элементами, 
включая возможность ассоциации сущностей со строками кода
Пакет ui.swing.terminal
1. Дописать javadoc 
Пакет ui.swing.useful
1. Перенести в пакет "кирпичики" по Swing.
2. Перенести JUnit-тесты по MercHighLighter в пакет 
3. Написать и отладить класс JFileNameTextField с возможностью выбора файла и валидацией введенного имени
4. Перенести логику создания экранной формы по модели из AutoBuildForm в новый класс JLabelledPanel
5. Добавить в этот класс фильтр для отсева полей, которые включать не нужно
6. Проверить работу кнопок удаления элемента и создания директории в JFileSelectionDialog.
7. Написать класс SwingDebugger для эмуляции Swing при отладке визуальных компонент
8. Дописать и отладить JDialogContainer и перевести на него другие классы с содержимым
9. Написать и отладить JORMProvidedTableModel 
10. Дописать javadoc
Пакет ui.swing.useful требует ревизии содержимого. Необходимо по каждому классу написать тест (в том числе и используя Robot), проверить его работу в реальных 
условиях, дополнить все классы средствами локализации, а также включить их в генерацию форм по моделям. 
*Из пакета ui.swing и класса PureLibSettings необходимо исключить явные ссылки на различные цвета, ввести вместо этого понятие "цветовая схема" (формат *.xml),
 обернуть ее в соответствующий класс и обеспечить доступ к нему из всех необходимых мест.
Пакет ui.swing.useful.svg необходимо расширить дополнительными возможностями формата.
Пакет xml
1. Написать сериализатор XML
Пакеты sun.net.www.protocol
1. Написать тесты на все классы пакетов
Необходимо дополнить проект lib пакетом monitoring, поддержав в нем следующие функции:
- регистрацию инстанции класса в системе мониторинга
- изменение состояния инстанции класса с отображением таких изменений в системе мониторинга
- возможность быстрой "подсказки" по состоянию класса из системы мониторинга
- возможность доступа по MBean к данным системы мониторинга 


Работы по Pure Library Navigator 0.0.1

1. Рефакторинг проекта под применение новых возможностей Pure Library
2. Рефакторинг базы знаний о Pure Library
3. Разработка аналога JavaDoc с возможностью локализации
4. Построение навигатора по дереву модели
В проекте navigator необходимо написать по работе javadoc формирование полного XML-описания, а также написать трансформации для генерации 
соответствующего контента (pdf, статический html в виде *.jar, статический html в виде директории, lucene-индекс и т.д.). Для генерируемого XML-файла 
необходимо также написать *.xsd и разместить его в проекте lib. Список тегов необходимо дополнить тегом @keyword

Работы по FSysCommander 0.0.1

1. Рефакторинг проекта под применение новых возможностей Pure Library
2. Разработка функциональности

Работы по Merc 0.0.1

1. Разработка компилятора MerLan
2. JUnit-тесты для компилятора
3. Разработка отладчика MerLan
4. JUnit-тесты для отладчика
5. Статический контент для справки (описание MerLan, описание world) 

http://www.docjar.com/docs/api/com/sun/tools/example/trace/package-index.html

https://www.developer.com/java/other/article.php/3085991/Javadoc-Programming.htm
