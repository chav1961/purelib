Новые возможности

Пакет basic

1. Написан и отлажен новый класс, реализующий интерфейс SyntaxTreeInterface - класс OrdinalSyntaxTree на базе структуры TreeMap. Функциональность его полностью
идентична таковой у AndOrTree. На основании тестов можно считать, что классы являются полностью взаимозаменяемыми.
2. Написан и отлажен класс ArgParser, реализующий разбор аргументов командной строки. Класс будет полезен в методе public static void main(String[] args), но может
быть использован и за его пределами. Класс поддерживает позиционные и ключевые параметры командной строки, контроль обязательных и опциональных параметров, выдачу 
на консоль краткой справки по аргументам командной строки. Класс поддерживает булевы, целые, вещественные, строковые параметры, параметры-нумерации и URI.

Пакет basic.growablearrays

1. Написан и отлажен класс InOutGrowableCharArray, являющийся дочерним классом GrowableCharArray, и поддерживающий работу с массивом как с приемником потокового вывода
(аналогично функциональности System.out) 

Пакет fsys

1. Добавлен новый тип файловой системы FileSystemOnClassLoader (подсхема classloader) для доступа к ресурсам внутри исполняемого архива 

Пакет model

Вновь введенный пакет, обеспечивающий работы библиотеки с моделями. Модели представляют собой иерархические описания различных сущностей (классов, полей классов, средств
навигации и проч). Модели могут быть построены на базе различных источников (xml-описания, аннотированные классы, схема базы данных и т.д.), а также образованы путем 
объединения нескольких моделей в одну. На основании модели классы библиотеки могут автоматически строить экранные и печатные формы, средства логического контроля данных,
поддерживать механизм ORM и проч. Модели, по мысли автора, являются долговременным решением и дальнейшая разработка библиотеки и проектов с ее использованием будет 
существенно базироваться на концепции модели.
Пакет содержит следующие классы:
- класс ContentModelFactory, обеспечивающий построение модели по различным источникам
- классы, реализующие интерфейсы ContentDescriptionInterface и ContentMetadataInterface (пакет model.interfaces)
- класс фильтра модели CоntentMetadataFilter, позволяющий временно исключать отдельные элементы модели при работе с ней. 

Пакет nanoservice 

Данный пакет в версии 0.0.2 имел статус "в разработке", и, соответственно, все закрытые классы. В версии 0.0.3 пакет открыт и его классы доступны к использованию.
Пакет представляет собой нано-WEB-сервер (на базе sun.com.net.http.HttpServer), доступный изнутри Java-приложений. Он поддерживает как статический контент (с использованием 
возможностей пакета fsys), так и легковесный аналог Rest-сервисов. Его очень удобно использовать в качестве встроенного Help-сервера по работе с программой (через WEB-браузер),
но он также вполне может быть использован и как полноценный WEB-сервер. В сервере имеется аналог процедуры деплоймента, что позволяет выполнять "горячую" замену отдельных сервисов.
Через этот же сервер Java-приложение может обеспечивать WEB-интерфейс к своим возможностям. Основной класс сервера - NanoServiceFactory.  

Пакет ui.swing.terminal

Данный пакет в версии 0.0.2 имел статус "в разработке", и, соответственно, все закрытые классы. В версии 0.0.3 пакет открыт и его классы доступны к использованию. 
Классы пакета эмулируют "зеленый терминал", позволяя с их помощью писать "алфавитно-цифровые" приложения. Несмотря на "древний" вид такого приложения, пользоваться 
этими классами удобно с точки зрения программирования, поскольку сразу же отпадают все вопросы, связанные с размещением и управлением графическими компонентами.
Пакет содержит три класса:
- класс "физической" консоли PseudoConsole (фактически - массив символов и их атрибутов - цвета фона и переднего плана)
- класс терминала Term, позволяющий работать с консолью как с устройством вывода (функциональность, аналогичная System.out), а также обрабатывать популярные 
  ESC-последовательности ANSI-терминалов
- класс TermUtils, поддерживающий ряд полезных операций с консолью (рисование псевдографических линий, областей, сохранение и восстановление частей экрана и т.д.)

Указанный набор классов протестирован на проекте fsyscommander, создание которого частично мотивировалось именно целью тестирования.

Пакет ui.swing.useful
  
Вновь введенный пакет. В него включены классы полезной функциональности, предназначенные для применения в Swing-приложениях. В их состав входит:

- класс JCreoleEditor - тестовый редактор формата Creole с подсветкой синтаксиса и форматированием. Эквивалент JTextPane
- класс JDateSelectionDialog - локализуемое поле ввода даты. Выпадающее окно позволяет вводить дату с помощью окошка, похожего на стандартное окно выбора даты в Windows
- JFileContentMenipulator - часто используемая локализуемая функциональность по созданию/загрузке/сохранению файлов в программе. Поддерживает операции new, open, save, 
  saveAs, отслеживает модификации, ведет автоматический список LRU
- JFileSelectionDialog - локализуемый аналог класса JFileChooser, использующего для выбора FileSystemInterface.
- JFileSystemChanger - локализуемый диалог выбора и проверки доступа к различным типам FileSystemInterface
- JLocalizedOptionPane - локализуемый аналог JOptionPane
- JStateString - часто используемая локализуемая функциональность статусной строки (сообщения, история сообщений, ProgressBar с возможностью прерывания операций)
- JTextPaneHihglighter - родительский класс для редакторов с подсветкой синтаксиса
- LabelledLayout - локализуемый менеджер размещения для двухколоночной верстки "имя поля"/"значение". Может резать длинную "кишку" из двух колонок на куски
     


   

Доработки существующей функциональности

Пакет basic

1. Класс Utils расширен рядом методов, поддерживающих специфичную обработку URI (дополнение path, извлечение вложенных URI и т.д.)
2. Класс Utils дополнен методами копирования потоков с progress-индикатором

Пакет basic.exceptions

1. Произведена ревизия исключений, переработана иерархия исключений.

Пaкет Enumerations

1. Управляющие нумерации, часто используемые в различных методах обхода, вынесены из многих мест в данный пакет. Классы, ранее их использовавшие, переписаны с учетом
данной доработки  

Пакет streams.char2byte.asm

1. В ассемблер байт-кода добавлены новые псевдокоманды:

- .lines и .source - ручная нумерация строк и указание источника кода (используется при написании трансляторов)
- .version - версия сгенерированного байт-кода (поддерживаются версии 1.7 и 1.8)
- .options - дополнительные возможности

2. В ассемблер байт-кода добавлена автоматизация *load. В ней можно употреблять практически полноценные выражения языка Java, которые будут автоматически перекомпилированы в 
последовательности команд байт-кода.

3. В связи с востребованностью в различных компиляторах, написан и отлажен класс CompilerUtils. В связке с классом AsmWriter он позволяет упростить кодогенерацию,
поддерживая часто используемые действия (построение заголовков методов, построение вызовов методов/конструкторов, построение обращений к полям класса и т.д.). В качестве параметров
методы класса принимают типы Class, Field, Method и Constructor

4. Для поддержки возможности отладки байт-кода в различных компиляторах, введена генерация допонительных секций в файле *.class, обычно используемых отладчиками.  

5. В параметрах команды ldc и ldc_w добавлена возможность задавать ссылку на класс в формате <packages>.<classname>.class (эквививалент конструкции ZZZ.class языка Java).

6. В псевдокоманде .import добавлена возможность задания ключевого слова 'protected' после полного имени импортируемого класса. Указанное ключевое слово позволяет импортировать
описания не только public-компонентов класса, но и его protected-компонентов. Полезна для случаев, когда вновь описываемый класс наследуется от импортируемого.


Устаревшие и исключенные компоненты

Исправление ошибок     

Пакет streams.char2char

1. В классе CreoleWriter исправлены ошибки разбора формата Creole, не "отловленные" на официальном контрольном примере с сайта.

Пакет streams.char2byte.asm.macro

1. В загрузчике классов MacroClassLoader исправлен код, вызывавший существенную деградацию производительности при загрузке классов.

