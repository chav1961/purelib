Работы по Pure Library 0.0.5

Общая работа
1. Ввести во все необходимые пакеты подпакет intern и перенести в него классы без контроля входных параметров(для повышения эффективности)

Пакет basic
1. Написать реализацию XmlBasedParser для построения парсеров "болтливых" языков типа SQL.
2. Дописать javadoc 
3. Написать класс XMLUtils и перенести в него полезный код из других классов
4. Добавить метод AboutPureLib в класс PureLibSettings
5. Перенести отладочную печать класса из ClassLoaderWRapper и CompilerUtils
6. Написать и отладить класс BPlusTree
7. Дополнить вызовы LogerFacade параметром для явной редукции сообщений (наподобие подавления слишком часто идущих сообщений)
8. Оптимизировать метод clear() в LongIdMap
9. Доплнить класс ArgParser типом аргумента Switch.
В пакете basic необходимо дополнить функциональность LoggerFacade фильтрами, а также набором свойств транзакционных логгеров. Необходимо также поднять MBean для управления 
этими логгерами (включение фильтров, изменение уровня логирования и других параметров логгера). Транзакционные логгеры необходимо также прокинуть во все трассируемые классы 
(наподобие asm), а также включить для работы с ними режим упаковки данных (с выбросом части данных в TempStore). Обеспечить также перенаправление и дублирование вывода 
логгеров с применением фильтров. Помимо этого, следует поднять MBуan для управления сервером HTTP, если это будет разрешено при запуске (-Dchav1961.purelib.mbean.http.control=true)
Пакет cdb
1. Написать тесты для SyntaxNodeUtils
Пакет concurrent
Пакет exceptions
Пакет fsys
1. Проверить работу FileSystemInMemory
3. Написать провайдер к файловым системам, чтобы пользоваться стандартным механизмом файловых систем в Java
В пакете fsys необходимо отладить InMemory класс, а также обеспечить возможность создания разделяемого экземпляра файловой системы. Необходимо также проверить 
работоспособность интерфейса с файловой системой "среда выполнения JRE" и исправить собственные ClassLoader-ы для поддержки этих файловых систем
Пакет i18n
1. Дописать javadoc 
2. Оттестировать работу с push/pop по URI
3. Написать изменяемый JSON-локализатор
В пакете i18n необходимо переработать организацию справки (с применением Creole Writer), а также избавиться от файлов *.properties, заменив их файлами *.xml. 
В проекте navigator необходимо создать локализатор для поиска, ведения и заполнения проектов соответствующей информацией. Необходимо также переработать способ 
монтирования локализаторов, чтобы исключить сложности с подключением дополнительных компонент (возможно, переделав локализаторы на файловую систему)
Пакет json
1. Выполнить рефакторинг JsonSerializer для получения максимальной производительности
2. Дополнить JsonSerializer возможностью работы с Beans (с использованием getter/setter)
3. Дописать javadoc 
4. Реализовать JSON-RPC протокол
5. Внести в JsonSerializer создание инстанции класса без механизма рефлексии.
6. Внести в JsonSerializer возможность работы с вложенными нестатическими классами
Пакет model
1. Написать и отладить класс ContentMetadataFilter
2. Дописать и отладить в ModelUtils методы чтения-записи полей по URI
3. Дописать javadoc
4. Дополнить формат поля признаком 'N' (поддерживает null-значения) и корректно обработать этот признак в стандартных органах управления (кнопка очистки)
5. Дополнить описатель формата опцией wizard=<...> для автоматического подсоединения заполнителей полей
В пару к построению моделей для таблиц БД, необходимо дополнить класс SQLUtils средствами генерации таблиц БД по их описаниям в модели
Пакет net
1. Написать URL для захвата аудио (схемы capture и stream) 
Пакет sql
1. Отладить все ранее написанные классы
2. Написать тесты к SQLUtils
3. Дописать javadoc 
4. Написать реализации интерфейсов Connection и Statement для поддержки препроцессорной обработки строк запросов (через  механизм делегирования) и возможности 
регистрации операций (Callback перед операцией и после операции)
5. Написать и отладить реализацию ORMMapper
В пакете sql необходимо написать класс, автоматически отображающий содержимое курсора на поля инстанции класса. Он должен поддерживать методы движения,
чтения и записи содержимого полей, а также поддерживать прямую работу с циклом for-each. Класс должен автоматизировать три операции:
- групповую выборку и проход по данным
- групповое изменение (или удаление) в процессе прохода по данным
- групповую вставку данных 
Каждая из операций может выполняться с промежуточными коммитами, если есть такая необходимость. Для операций формирования выходных документов необходимо 
написать дочерний класс, выполняющий обработку смены групп данных.
Пакет sql.content
1. Дописать покрытие тестами на все классы пакета
2. Дописать javadoc 
3. Дополнить тесты проверкой SPI
Пакет sql.junit
1. Реализовать все классы пакета
2. Написать для них тесты
3. Дописать javadoc
Пакет streams
1. Переделать JsonSaxHandlerFactory под новые возможности ассемблера и класса GettersAndSetters 
2. Добавить опцию для BigInteger/BigDecimal
3. Дополнить JsonStaxParser методом nested()->Iterable<LexType> для обработки вложенностей
4. Написать классы CsvStaxParser и CsvStaxPrinter 
5. Дописать javadoc 
Пакет streams.char2char
1. Дописать javadoc 
Пакет streams.char2byte.asm
1. Поддержать команду invokedynamic
2. Поддержать автоматизацию *load* (поля, индексы, арифметика в полном объеме)
3. Отладить работу .stack
В пакете asm необходимо завершить кодогенерацию для Java 1.8, а также переделать макрогенератор, исключив из него по возможности общую символьную строку. 
Желательно прокинуть туда же структуры из пакета cdb. Необходимо также дополнить синтаксис описателем ".const" для обеспечения возможности 
использования констант внутри генерируемого класса, а также описателем ".def" для простой макроподстановки при генерации кода. Этот описатель 
должен быть локален для вложенных блоков и должен удаляться при выходе из них. Необходимо также провести ревизию кода для обеспечения более 
эффективной трансляции. 
Пакет streams.char2byte.asm.macro
1. Переделать генерацию класса макроса, занеся символьные строки внутрь класса.
2. Поддержать индексы в параметрах и локальных переменных макросов
3. Поддержать переменное число аргументов в макросах
4. Заменить дублированные методы из InternalUtils методами из CompilerUtils
5. Исключить класс AssemblerTemplateRepo
6. Отладить работу MacroClassLoader (не грузит классы по URL)
Пакет ui
1. Отладить все ранее написанные классы.
2. Дописать javadoc 
В пакете ui необходимо дополнить классы интерпретатором диалоговой экранной формы. В пару к нему по протоколу SPI должны подтягиваться интерпретаторы 
для swing и для WEB. Интерпретатор получает в качестве параметров инстанцию класса с хранимыми данными и модель класса. Далее работает отображение 
инстанции класса через модель на соответствующую среду. Средства отображения должны правильно формировать картинку на соответствующем носителе, 
организовывать передачу и прием данных, их валидацию и обработку навигации (если это необходимо)
Пакет nanoservice
1. Дописать javadoc 
Пакет ui.swing
1. Дописать javadoc 
2. Дополнить класс JTextFieldWithMeta возможностью автоматических подсказок (поиск по БД, например).
3. Прокинуть необходимую для п.9 функциональность в JComponentMonitor
4. Оттестировать класс JRadioButtonWithMeta
В пакете ui.swing необходимо завести окно редактора кода с полноценной нумерацией, контекстной подсказкой, цветовыделением, гиперссылками и прочими элементами, 
включая возможность ассоциации сущностей со строками кода
Пакет ui.swing.terminal
1. Дописать javadoc 
Пакет ui.swing.useful
1. Перенести JUnit-тесты по MercHighLighter в пакет 
2. Проверить работу кнопок удаления элемента и создания директории в JFileSelectionDialog.
3. Дописать и отладить JDialogContainer и перевести на него другие классы с содержимым
4. Дописать javadoc
5. Написать и отладить JContentMetadatEditor
6. Оттестировать класс DnDManager
7. Переписать LabelledLayout, чтобы убрать дублирование кода, и написать тесты к нему
8. Написать и отладить редактор изменяемого JSON-локализатора
9. Написать и отладить класс JScrolledTableWithFreezing
10. Доделать обработку @Action в описании аннотированного класса
Пакет ui.swing.useful требует ревизии содержимого. Необходимо по каждому классу написать тест (в том числе и используя Robot), проверить его работу в реальных 
условиях, дополнить все классы средствами локализации, а также включить их в генерацию форм по моделям. 
Пакет ui.swing.useful.svg необходимо расширить дополнительными возможностями формата.
Пакет xml
1. Написать сериализатор XML
Пакеты sun.net.www.protocol
1. Написать тесты на все классы пакетов
Необходимо дополнить проект lib пакетом monitoring, поддержав в нем следующие функции:
- регистрацию инстанции класса в системе мониторинга
- изменение состояния инстанции класса с отображением таких изменений в системе мониторинга
- возможность быстрой "подсказки" по состоянию класса из системы мониторинга
- возможность доступа по MBean к данным системы мониторинга 
